<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAq04tDKtOLRyrTi0cq04tCgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKtO
        LRKrTi1oq04tsqxOLeitTi3/rk8t/65PLf+tTi3/rE4t4qtOLaqrTi1eq04tDAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKtO
        LRarTi2SrU4t9LFQLv+1US//uVMv/7tUMP+8VTD/vFUw/7tUMP+5Uy//tVEv/7BPLf+sTi3uq04tgqtO
        LQwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AACrTi1WrE4t7LJQLv+4Uy//vlUx/8NXMv/GWTP/yFo0/8lbNP/JWzT/yFo0/8ZZM//CVzL/vVUx/7hT
        L/+xUC7/q04t4KtOLUIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AACrTi0Aq04thq1OLf+2Ui//vlUx/8VYM//KWzX/zF84/81hO//OYz7/zmQ//85kP//OYz7/zWE7/8xe
        OP/JWzX/xFgy/71VMf+1US7/rU4t+qtOLWoAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAKtOLYiuTy3/uFMv/8FXMv/JWzT/zV85/85kP//PaEP/0GtH/9FsSf/RbUr/0W1K/9Fs
        Sf/Qakf/z2dC/85kPv/MXzn/yFo0/8BWMf+3Ui//rU4t/KtOLWoAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAACrTi1erk4t/7hTL//CVzL/y1w1/85iPf/PaEP/0W1J/9JwTf/SclD/03NR/9N0
        Uv/TdFL/03NR/9JxUP/Sb03/0WxJ/89nQ//NYTz/yls1/8FXMv+3Ui//rU4t+qtOLUIAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAq04tHKxOLfC2Ui//wVcy/8tcNv/OYz7/0GpG/85oRP/PaUb/0GxJ/9Fu
        S//Rbkv/03NS/9JvTP/Rbkv/0W1K/9BsSP/PaUX/zmdD/9BpRf/OYj3/yls1/8BWMf+1US7/q04t4KtO
        LQwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACrTi2islAu/75WMf/JWzT/zmI9/9BqRv/ScE3/03pc/+/N
        wf/vy7//78zA//DRxv/OZD//4JyF/+/MwP/vzMD/78u//+7Nwf/Telz/0nBN/9BpRf/NYTz/yFo0/71V
        Mf+xUC7/q04tggAAAAAAAAAAAAAAAAAAAAAAAAAAq04tIK1OLfq5UzD/xVkz/81gOv/PaET/0m9N/9N1
        VP/Zh2r/5KeS/96VfP/eln3/7su+/85kP//nsqD/3pd+/96Wff/elXz/46SP/9mHav/TdFP/0W9M/89n
        Q//MXzn/xFgy/7hTL/+sTi3uq04tDAAAAAAAAAAAAAAAAAAAAACrTi1+slAu/79WMf/KXDX/zmVA/9Ft
        Sv/Tc1L/1HhY/9qIbP/kqZT/3pd+/96Xfv/uy77/z2ZB/+ezoP/el37/3pd+/96Xfv/jppH/2ohs/9R4
        V//TclH/0WxJ/85kPv/JWzX/vVUx/7BPLf+rTi1eAAAAAAAAAAAAAAAAAAAAAKtOLcq2Ui//xFgy/81f
        Of/QaET/0nBO/9R2Vf/Velr/2olt/+Sqlv/fmoL/4JyF/+/Owv/ai3D/7ca4/+Cehv/gnIX/35qC/+On
        kv/aiW3/1Xpa/9N1VP/Sb03/z2dC/8xeOP/CVzL/tVEv/6tOLaoAAAAAAAAAAAAAAACrTi0IrU4t+rpU
        MP/HWjP/zmI8/9FtSv/Velv/2YZq/9yPdf/hn4j/6ruq/+Wtmf/lrZn/6r2t//DOwv/wzsL/5a2Z/+Wt
        mf/lrZn/6bmo/+GfiP/bj3T/2YZp/9V6Wv/Qa0j/zWE7/8ZZM/+5Uy//rE4t4gAAAAAAAAAAAAAAAKtO
        LSiuTy3/vVUx/85oRf/Wfl//3I90/96VfP/fmYH/4JyE/+Onkv/wzcH/+Oji//Tc1P/nsZ7/57Ge/+ex
        nv/sw7T/+Oji//PYzv/qvKz/46eS/+Cbg//fmYD/3ZR7/9uOc//WfV7/zWdE/7xVMf+tTi3/q04tCgAA
        AAAAAAAAq04tPLRUMv/Ue1z/2olt/9yQdf/eln3/4JuD/+GfiP/ioYv/5KuX//LWy///////+u/r/+i1
        o//otaP/6LWj/+/Nwv//////+Onk/+vAsf/kq5f/4aGK/+Geh//fmoL/3pZ9/9yPdP/aiGz/1Hpa/7NU
        Mv+sTi0cAAAAAAAAAACrTi08wWZG/9qJbP/ckHX/3pd+/+Cchf/hoYr/46SO/+Omkf/msJ3/8dLH//fn
        4f/03dT/6bmo/+m5qP/puaj/7si7//fn4f/z2dD/7MS1/+awnf/jppH/4qSO/+Ggiv/gnIT/3pZ9/9yP
        dP/Zh2v/wGVF/61OLRwAAAAAAAAAAKtOLSzAY0P/3I50/96Wff/gnIT/4qKL/+OmkP/kqJT/5KmV/+e0
        ov/46eT/9+Xf//fl3//35d//9+Xf//fl3//35d//9+Xf//fl3//46OP/57Si/+Splf/kqJP/46WQ/+Gh
        iv/gm4P/3ZV7/9uOc/+/Y0L/q04tDAAAAAAAAAAAq04tDLhcO/zelXz/4JuE/+Khi//jp5L/5auX/+Om
        kP/qva7/8M/D//DPxP/wz8T/8M/E//DPxP/wz8T/8M/E//DPxP/wz8T/8M/E//DPxP/wz8P/7MGy/+Kk
        jv/kqpb/46aR/+Khiv/fm4P/3ZV7/7hcPOgAAAAAAAAAAAAAAAAAAAAArk8t0t6Xfv/hoYr/46aR/+Ws
        l//mr5z/5rGe/+Wrl//z2M//+u3p//Xe1v/13tb/9d7W//Xe1v/13tb/9d7W//Xe1v/13dX/+evn//Td
        1f/lrJj/5rCd/+avnP/lq5f/46aQ/+Ggif/eln3/r08tsgAAAAAAAAAAAAAAAAAAAACrTi2I0oNo/+Om
        kf/lrJf/5rCd/+e0ov/ouKb/6bqp/+e0ov/sw7X/+e3p//Xf1//03NP/9NzT//Tc0//03NP/9N7W//nt
        6f/uyLv/57Oh/+m5qP/ot6b/57Si/+avnP/lq5b/46WQ/9GDaP+rTi1oAAAAAAAAAAAAAAAAAAAAAKtO
        LSq9Y0P85auX/+awnf/ntKL/6bin/+q7q//rvq7/68Cw/+u+rv/qu6v/9+Te//jo4//139f/9d/X//fk
        3v/35+H/7si7/+q9rf/rv7D/676u/+q7q//puKf/57Si/+avnP/kq5b/vWNE9KtOLRIAAAAAAAAAAAAA
        AAAAAAAAAAAAAKtOLbLbl3//57Si/+m4p//qvKv/67+v/+zCs//sxLX/7cW2/+3Ft//rvq//8dTK//rv
        7P/67+v/+vDs//jo4//vy7//7cW2/+zEtf/swrL/67+v/+q7q//ouKb/57Oh/9qWfv+rTi2SAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAq04tKrhfQPjotaT/6rys/+u/sP/swrP/7cW3/+3Huf/uyLv/7sm8/+7K
        vf/ux7n/7si7/+/Lvv/03dX//PTx//DOwv/uyLv/7ca5/+3Etv/swrP/67+v/+q8q//otaP/uWBB7KtO
        LRYAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAq04tdsp7YP/rwLD/7MO0/+3Ft//ux7r/7sq9/+/L
        v//vzMD/8M3B//DNwf/vzcH/78zA/+3Iuv/tx7n/7si7/+/Lvv/uyb3/7se6/+3Ft//swrP/67+v/8l7
        YP+rTi1WAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACrTi0Cq04tpNKMdP/txrj/7si7/+/K
        vv/vzMD/8M7C//DPxP/w0MX/8NDF//DQxf/w0MX/8NDF//DPxP/wz8T/8M7C/+/MwP/vyr7/7si7/+3G
        uP/SjHT/q04thgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACrTi0Eq04tpMyB
        Zv/uyLv/8M7C//DPxP/x0cb/8dHG//HTyP/y08n/8tPJ//LTyf/y08n/8dLI//HRxv/w0MX/8M/E//DN
        wv/uyLv/y4Fm/6tOLYirTi0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AACrTi0Cq04tdrpkRvjir53/8dLH//HTyP/y1Mr/8tXL//LVy//y1sz/8tbM//LVy//y1cv/8tTK//HT
        yP/x0sf/4q6c/7plRvCrTi1eAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAq04tKqtOLbLAb1L83aaS//DPxP/z187/89jO//PYzv/z2M7/89jP//PX
        zv/wz8T/3aaS/8BvUvqrTi2iq04tHAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKtOLSqrTi2IsFEv0r5rTvzKgmn/zpB6/86Q
        ev/Kgmn/vmtO+rBRL8qrTi1+q04tIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAq04tDKtO
        LSyrTi08q04tPKtOLSirTi0IAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAA////////////8A///4AB//8AAP/8AAB/+AAAP/gAAB/wAAAP4AAAB+AA
        AAfgAAAHwAAAA8AAAAPAAAADwAAAA8AAAAPAAAADwAAAA8AAAAPAAAAH4AAAB+AAAAfwAAAP+AAAH/gA
        AB/8AAA//wAA//+AAf//4A////////////8=
</value>
  </data>
</root>