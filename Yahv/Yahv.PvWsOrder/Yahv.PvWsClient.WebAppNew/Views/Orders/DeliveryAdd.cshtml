@{
    ViewBag.title = "新增发货订单";
}
<div id="vDeliveryAdd" v-cloak class="tab_content order_add">
    <div class="info_item_wrap">
        <span class="icon_img">1</span>
        <span class="title">订单基本信息</span>
    </div>
    <el-form ref="ruleForm" :model="formData" :rules="rules" label-width="130px">
        <el-form-item class="currency mt20" label="货值币种:" prop="Currency" :rules="[{required: true, message: '请选择币种', trigger: 'change'}]"
                      style="margin-bottom: 10px;">
            <el-select style="width: 128px;" size="mini" v-model="formData.Currency" filterable clearable placeholder="请选择">
                <el-option v-for="item in baseData.PayCurrencyOptions"
                           :key="item.value"
                           :label="item.text"
                           :value="item.value">
                </el-option>
            </el-select>
        </el-form-item>
        <div>
            <div class="btn-tb-list clearfix">
                <el-button v-on:click="dialogProductVisible=true" class="fl">选择库存</el-button>
            </div>
        </div>
        <div class="tb_wrap">
            <table class="common_tb1 mt20 common_tb">
                <tr>
                    <th width="36px">序号</th>
                    <th>型号</th>
                    <th>品名</th>
                    <th>品牌</th>
                    <th width="90px">单位</th>
                    <th width="70px">数量</th>
                    <th width="90px">单价</th>
                    <th width="90px">总价</th>
                    <th width="120px">产地</th>
                    <th width="36px;">操作</th>
                </tr>
                <tr v-for="(item,index) in formData.OrderItems">
                    <td>{{index+1}}</td>
                    <td> {{item.PartNumber}}</td>
                    <td> <el-input style="width:100px" size="mini" v-model="item.Name"></el-input></td>
                    <td>{{item.Manufacturer}}</td>
                    <td>
                        <el-select size="mini" v-model="item.Unit" filterable clearable>
                            <el-option v-for="c in baseData.UnitOptions"
                                       :key="c.value"
                                       :label="c.text"
                                       :value="c.value">
                            </el-option>
                        </el-select>
                    </td>
                    <td><el-input size="mini" v-model="item.Quantity" v-on:focus="clearZero(item,'Quantity')" v-on:blur="validTotalPrice(item,'Quantity')"></el-input></td>
                    <td><el-input size="mini" v-model="item.UnitPrice" v-on:focus="clearZero(item,'UnitPrice')" v-on:blur="validTotalPrice(item,'UnitPrice')"></el-input></td>
                    <td>{{item.TotalPrice}}</td>
                    <td>
                        <el-select size="mini" v-model="item.Origin" filterable clearable>
                            <el-option v-for="c in baseData.OriginOptions"
                                       :key="c.value"
                                       :label="c.text"
                                       :value="c.value">
                            </el-option>
                        </el-select>
                    </td>
                    <td><i v-on:click="handleSubItemDelete(index)" class="tb_icon_del"></i></td>
                </tr>
                <tr v-if="formData.OrderItems.length>0">
                    <td colspan="5" class="text_center pr20  txt_tb_bottom">合计：</td>
                    <td class="txt_tb_bottom text_left">{{totalNum}}</td>
                    <td class="txt_tb_bottom"></td>
                    <td class="txt_tb_bottom text_left">{{totalPrice}}</td>
                    <td class="txt_tb_bottom"></td>
                    <td class="txt_tb_bottom"></td>
                </tr>
                <tr v-if="formData.OrderItems.length==0"><td colspan="10">暂无数据</td></tr>
            </table>
        </div>
        <div class="info-total-wrap clearfix mt26">
            <div class="fl">
                <el-form-item label="总箱数:" prop="PackNo">
                    <el-input size="mini" v-on:blur="validDecimalText('PackNo')" v-model="formData.PackNo" style="width:80px;" auto-complete="off"></el-input>
                </el-form-item>
            </div>
            <div class="fl ml110">
                <el-form-item class="fl " label="毛重(KG):" prop="GrossWeight" :rules="[{ required: false, message: '', trigger: 'blur' }]">
                    <el-input size="mini" v-on:blur="validDecimalText('GrossWeight')" v-model="formData.GrossWeight" placeholder="" style="width:80px;" auto-complete="off"></el-input>
                </el-form-item>
            </div>
        </div>
        @*<div class="btn-tb-list clearfix">
            <el-button v-on:click="dialogProductVisible=true" class="fl">选择库存</el-button>
        </div>*@
        <el-form-item class="mt8" label="费用结算币种" prop="SettlementCurrency" :rules="[{required: true, message: '请选择币种', trigger: 'change'}]">
            <el-select size="mini" style="width:200px;" v-model="formData.SettlementCurrency" filterable clearable placeholder="请选择">
                <el-option v-for="item in baseData.SetCurrencyOptions"
                           :key="item.value"
                           :label="item.text"
                           :value="item.value">
                </el-option>
            </el-select>
        </el-form-item>
        <el-form-item class="mt20" label="是否代收货款:">
            <el-radio-group v-model="formData.IsRecieve">
                <el-radio v-for="item of radioOptions" :label=item.value>{{item.text}}</el-radio>
            </el-radio-group>
        </el-form-item>
        <div v-if="formData.IsRecieve">
            <div class="clearfix mt12">
                <el-form-item label="收款金额:" prop="RecievePrice">
                    <el-input id="RecievePriceInput" style="width: 200px;" size="mini" placeholder="请输入收款金额" v-model="formData.RecievePrice" auto-complete="off"></el-input>
                </el-form-item>
                <el-form-item label="付款人:" prop="PayerID" class="fl" :rules="[{ required: true, message: '请选择收款人', trigger: 'change' }]">
                    <el-select v-model="formData.PayerID" size="mini" v-on:click.native="onPayer" style="width: 200px;" filterable clearable placeholder="请选择">
                        <el-option v-for="item in PayerOptions"
                                   :key="item.value"
                                   :label="item.text"
                                   :value="item.value">
                        </el-option>
                    </el-select>
                </el-form-item>
                <el-button class="btn_add ml8 fl" style="margin-top: 5px;" v-on:click="PayerVisible2">+新增</el-button>
            </div>
            <div class="clearfix">
                <div class="fl wp50">
                    @*<el-form-item label="付款方式:">
                        <el-input size="mini" v-model="PayerMethodName" style="width: 200px;" readonly auto-complete="off"></el-input>
                    </el-form-item>*@
                    <el-form-item label="付款方式" prop="PayerMethod" :rules="[{ required: true, message: '请选择付款方式', trigger: 'change' }]">
                        <el-select size="mini" style="width: 200px" v-model="formData.PayerMethod" filterable clearable placeholder="请选择">
                            <el-option v-for="item in baseData.PayerMethordOptions"
                                       :key="item.value"
                                       :label="item.text"
                                       :value="item.value">
                            </el-option>
                        </el-select>
                    </el-form-item>
                </div>
                <div class="fl">
                    @*<el-form-item label="付款币种:">
                        <el-input size="mini" v-model="PayerCurrencyName" style="width: 200px;" readonly auto-complete="off"></el-input>
                    </el-form-item>*@
                    <el-form-item label="付款币种" prop="PayerCurrency" :rules="[{ required: true, message: '请选择付款人币种', trigger: 'change' }]">
                        <el-select size="mini" style="width: 200px" v-model="formData.PayerCurrency" filterable clearable placeholder="请选择">
                            <el-option v-for="item in baseData.PayerCurrencyOptions"
                                       :key="item.value"
                                       :label="item.text"
                                       :value="item.value">
                            </el-option>
                        </el-select>
                    </el-form-item>
                </div>
            </div>
            <div class="clearfix">
                <div class="fl wp50">
                    <el-form-item label="发货条件:" prop="DelivaryOpportunity" :rules="[{ required: true, message: '请选择发货条件', trigger: 'change' }]">
                        <el-select style="width: 200px;" size="mini" v-model="formData.DelivaryOpportunity" filterable clearable placeholder="请选择">
                            <el-option v-for="item in baseData.DelivaryOppOptions"
                                       :key="item.value"
                                       :label="item.text"
                                       :value="item.value">
                            </el-option>
                        </el-select>
                    </el-form-item>
                </div>
            </div>
            <div v-if="formData.PayerMethod==5" class="clearfix">
                <div class="fl wp50">
                    <el-form-item label="是否入账:" prop="IsEntry">
                        <el-radio-group v-model="formData.IsEntry">
                            <el-radio v-for="item of radioOptions" :label=item.value>{{item.text}}</el-radio>
                        </el-radio-group>
                    </el-form-item>
                </div>
                <div v-if="!formData.IsEntry" class="fl">
                    <el-form-item label="支票投送方式:" prop="CheckDelivery" :rules="[{ required: true, message: '请选择支票投送方式', trigger: 'change' }]">
                        <el-select style="width: 200px;" size="mini" v-model="formData.CheckDelivery" filterable clearable placeholder="请选择">
                            <el-option v-for="item in baseData.CheckDelTypeOptions"
                                       :key="item.value"
                                       :label="item.text"
                                       :value="item.value">
                            </el-option>
                        </el-select>
                    </el-form-item>
                </div>
                <div v-else class="fl">
                    <el-form-item label="银行:" prop="CheckPayeeAccount" :rules="[{ required: true, message: '请填写银行', trigger: 'blur' }]">
                        <el-input style="width: 200px" size="mini" v-model="formData.CheckPayeeAccount"></el-input>
                    </el-form-item>
                </div>
            </div>
            <div v-if="formData.PayerMethod==5 && !formData.IsEntry && formData.CheckDelivery>1" class="clearfix">
                <div v-if="formData.CheckDelivery==3" class="fl wp50">
                    <el-form-item label="快递承运商:" prop="CheckCarrier" :rules="[{ required: true, message: '请填写快递承运商', trigger: 'blur' }]">
                        <el-input style="width: 200px" size="mini" v-model="formData.CheckCarrier"></el-input>
                    </el-form-item>
                </div>
                <div v-if="formData.CheckDelivery>=3" class="fl">
                    <el-form-item label="收票人地址:" prop="CheckConsignee" :rules="[{ required: true, message: '请填写收票人地址', trigger: 'blur' }]">
                        <el-input style="width: 200px" size="mini" v-model="formData.CheckConsignee"></el-input>
                    </el-form-item>
                </div>
            </div>
            <div v-if="formData.PayerMethod==5" class="clearfix">
                <div class="fl wp100">
                    <el-form-item label="支票抬头:" :rules="[{ required: true }]">
                        <el-radio-group v-model="TitleSelect">
                            <el-radio :label="1" :disabled="formData.IsEntry == false && formData.PayerMethod == 5">
                                <span id="hkTitle">HONG KONG EXPRESS INTERNATIONAL LOGISTICS LIMITED</span>
                            </el-radio>
                            <el-radio :label="2">
                                <el-input id="inputTitle" style="width: 460px" size="mini" :readonly="TitleSelect==1" v-model="TitleText" maxlength="50"></el-input>
                            </el-radio>
                        </el-radio-group>
                    </el-form-item>
                </div>
            </div>
            <span id="hkTitle1" style="display: none;">HONG KONG EXPRESS INTERNATIONAL LOGISTICS LIMITED</span>
            <div v-show="formData.PayerMethod==3" class="clearfix">
                <div class="fl wp100">
                    <el-form-item class="mt20" label="我方账户:" prop="CompanyBankID" :rules="[{ required: true, message: '', trigger: 'change' }]">
                        <el-radio-group class="mt10" v-model="formData.CompanyBankID">
                            <el-radio style="display:block;height:80px;margin-top:15px;" :title="item.EnterpriseName" size="mini" :label=item.ID v-for="item of baseData.PayeeOptions">
                                <div style="margin-top: -39px;margin-left: 23px;">
                                    <span>账户：{{item.EnterpriseName}}</span>
                                    <el-button style="padding: 0px;" type="text" data-clipboard-action="copy" class="cobyOrderSn" :data-clipboard-text="item.ForCopy" v-on:click="copyOurAccount">复制</el-button>
                                    <br />
                                    <span>账号：{{item.Account}}</span><br />
                                    <span>银行：{{item.Bank}}</span><br />
                                    <span>银行地址：{{item.BankAddress}}</span><br />
                                    <span>SWIFTCODE：{{item.SwiftCode}}</span>
                                </div>
                            </el-radio>
                        </el-radio-group>
                    </el-form-item>
                </div>
            </div>
        </div>
        <div class="info_item_wrap mt40">
            <span class="icon_img">2</span>
            <span class="title">货物特殊要求</span>
            <a class="ml20 font14 link" v-on:click="openGoods">新增</a>
        </div>
        <table class="common_tb1 mt20 wp70" v-if="formData.SpecialGoods.length>0">
            <tr>
                <th width="20px">#</th>
                <th>服务项目</th>
                <th>服务要求</th>
                <th>数量</th>
                <th>具体要求</th>
                <th>服务费(RMB)</th>
                <th>文件</th>
                <th>操作</th>
            </tr>
            <tr v-for="(item,index) of formData.SpecialGoods">
                <td>{{index+1}}</td>
                <td>{{item.TypeName}}</td>
                <td>{{item.Name}}</td>
                <td>{{item.Quantity}}</td>
                <td>{{item.Requirement}}</td>
                <td>{{item.TotalPrice}}</td>
                <td><a v-if="item.FileFullURL!=''&&item.FileFullURL!=null" target="_blank" :href="item.FileFullURL">{{item.FileName}}</a></td>
                <td><a v-on:click="del_goods(index)">删除</a></td>
            </tr>
        </table>
        <div class="info_item_wrap mt40">
            <span class="icon_img">3</span>
            <span class="title">香港发货方式</span>
        </div>
        <el-form-item class="font_bold mt20" label="香港物流:">
            <el-radio-group v-model="formData.WaybillType">
                <el-radio v-for="item of baseData.WaybillTypeOptions" :label=item.value>{{item.text}}</el-radio>
            </el-radio-group>
        </el-form-item>

        <div v-if="formData.WaybillType=='1'" class="mt20">
            <el-form-item label="提货时间:" prop="PickupTime" :rules="[{ type: 'date', required: true, message: '请选择提货时间', trigger: 'change' }]">
                <el-date-picker type="date" size="mini" :picker-options="pickerOptions" placeholder="提货时间" v-model="formData.PickupTime" style="width:200px;"></el-date-picker>
            </el-form-item>
            <el-form-item label="提货人:" prop="ClientPicker" :rules="[{ required: true, message: '请输入提货人', trigger: 'blur' },{max:50, message: '提货人长度超过限制', trigger: 'blur' }]">
                <el-input size="mini" placeholder="请输入提货人" v-model="formData.ClientPicker" style="width:200px;" auto-complete="off"></el-input>
            </el-form-item>

            <el-form-item label="电话:" prop="ClientPickerMobile" :rules="[{ required: true, message: '请输入电话', trigger: 'blur' },{max:20, message: '电话长度超过限制', trigger: 'blur' }]">
                <el-input size="mini" placeholder="请输入电话" v-model="formData.ClientPickerMobile" style="width:200px;" auto-complete="off"></el-input>
            </el-form-item>
            <el-form-item label="证件类型:" prop="IDType" :rules="[{ required: true, message: '请选择证件类型', trigger: 'change' }]">
                <el-select size="mini" v-model="formData.IDType" style="width:200px;" clearable placeholder="请选择">
                    <el-option v-for="item in baseData.IDTypeOptions"
                               :key="item.value"
                               :label="item.text"
                               :value="item.value">
                    </el-option>
                </el-select>
            </el-form-item>
            <div v-if="formData.IDType != '3'">
                <el-form-item label="证件号码:" prop="IDNumber" :rules="[{ required: true, message: '请输入证件号码', trigger: 'blur' },{max:20, message: '证件号码长度超过限制', trigger: 'blur' }]">
                    <el-input size="mini" placeholder="请输入证件号码" v-model="formData.IDNumber" style="width:200px;" auto-complete="off"></el-input>
                </el-form-item>
            </div>
            <div v-if="formData.IDType == '3'">
                <el-form-item label="公章内容:" prop="SealContext" :rules="[{ message: '请输入公章内容', trigger: 'blur' },{max:50, message: '公章内容长度超过限制', trigger: 'blur' }]">
                    <el-input size="mini" placeholder="请输入公章内容" v-model="formData.SealContext" style="width:200px;" auto-complete="off"></el-input>
                </el-form-item>
            </div>
        </div>
        <div v-if="formData.WaybillType=='2'" class="mt20">
            <el-form-item class="mt20" label="收货地址" prop="ClientConsignee" :rules="[{ required: true, message: '请选择收货地址', trigger: 'change' }]">
                <el-select size="mini" v-model="formData.ClientConsignee" v-on:change="handConsigneeChange" style="width:200px;" clearable placeholder="请选择">
                    <el-option v-for="item in baseData.ReceiveOptions"
                               :key="item.value"
                               :label="item.text"
                               :value="item.value">
                    </el-option>
                </el-select>
                <el-button class="btn_add ml40" v-on:click="openDialogConsignee">+新增收货地址</el-button>
                <p class="txt1" v-if="formData.ClientConsigneeName!=''&&formData.ClientConsigneeName!=null&&formData.ClientConsignee!=null&&formData.ClientConsignee!=''">联系人：{{formData.ClientConsigneeName}} 电话：{{formData.ClientContactMobile}} 地址：{{formData.ClientConsigneeAddress}}</p>
            </el-form-item>
        </div>
        <div v-if="formData.WaybillType=='3'" class="mt20">
            <el-form-item class="mt20" label="收货地址" prop="ClientConsignee" :rules="[{ required: true, message: '请选择收货地址', trigger: 'change' }]">
                <el-select size="mini" v-model="formData.ClientConsignee" v-on:change="handConsigneeChange" style="width:200px;" clearable placeholder="请选择">
                    <el-option v-for="item in baseData.ReceiveOptions"
                               :key="item.value"
                               :label="item.text"
                               :value="item.value">
                    </el-option>
                </el-select>
                <el-button class="btn_add ml40" v-on:click="openDialogConsignee">+新增收货地址</el-button>
                <p class="txt1" v-if="formData.ClientConsigneeName!=''&&formData.ClientConsigneeName!=null">联系人：{{formData.ClientConsigneeName}} 电话：{{formData.ClientContactMobile}} 地址：{{formData.ClientConsigneeAddress}}</p>
            </el-form-item>
            <el-form-item label="快递公司:" prop="ExpressID">
                <el-select size="mini" v-model="formData.ExpressID" style="width:200px;" filterable clearable placeholder="请选择">
                    <el-option v-for="item in baseData.CarrierOptions"
                               :key="item.value"
                               :label="item.text"
                               :value="item.value">
                    </el-option>
                </el-select>
            </el-form-item>
            <el-form-item label="邮政编码:" prop="ZipCode" :rules="[{ required: false, message: '请输入邮政编码', trigger: 'blur' },{max:50, message: '邮政编码长度超过限制', trigger: 'blur' }]">
                <el-input size="mini" placeholder="请输入邮政编码" v-model="formData.ZipCode" style="width:200px;" auto-complete="off"></el-input>
            </el-form-item>
            <el-form-item label="是否垫付运费:">
                <el-radio-group v-model="formData.Freight">
                    <el-radio v-for="item of radioOptions" :label=item.value>{{item.text}}</el-radio>
                </el-radio-group>
            </el-form-item>
        </div>
        <div class="info_item_wrap mt40">
            <span class="icon_img">4</span>
            <span class="title">附件信息</span>
        </div>
        <div class="clearfix mt20">
            <div class="fl w130">
                <span class="fl txt2 el-form-item__label"><span style="color: #F56C6C;margin-right: 4px; display:none;">*</span>发票:</span>
            </div>
            <div class="fl upload_wrap mt6">
                <el-upload multiple
                           ref="PIupload"
                           :http-request="((item)=>{httpRequestFiles(item,'PIFiles')})"
                           action="/Files/UploadOrderFile"
                           :show-file-list="false"
                           accept="image/jpg, image/bmp, image/jpeg, image/gif, image/png, application/pdf">
                    <el-button size="small" class="btn_upload " type="primary">+添加文件</el-button>
                    <span class="txt_grey ml8">仅限图片或PDF文件，且文件不超过3M</span>
                </el-upload>
                <ul class="file_item_ul mt10">
                    <li class="clearfix" v-for="(item,index) in formData.PIFiles">
                        <span class="icon1"></span>
                        <a class="file_name ml6" :href="item.fullURL" target="_blank">{{item.name}}</a>
                        <span class="icon2 fr" v-on:click="del_file(index,'PIFiles')"></span>
                    </li>
                </ul>
            </div>
        </div>
        <div class="clearfix">
            <div class="fl">
                <span class="txt_red tip">
                    温馨提示:  尊敬的客户，请您提供送货所需要的资料，如：装箱单、发票、入仓号等，
                    若因您提供的资料不全或有误，造成的损失将由您承担。
                </span>
            </div>
        </div>
    </el-form>
    <div class="btn_bottom mt80 mb100">
        <button class="btn2" v-on:click="onSubmit">提交</button>
    </div>
    <el-dialog title="" class="dialog_success" :lock-scroll="false" width="520px" :before-close="btn_back" :visible.sync="dialogSuccessVisible" :close-on-click-modal="false">
        <div class="content" style="text-align:center">
            <p class="title">订单提交成功</p>
            <p class="mt30">订单编号：<span class="txt_blue">{{orderid}}</span></p>
        </div>
        <div class="el-dialog__footer pb30 mt30">
            <button class="btn2" v-on:click="orderDetails">查看订单信息</button>
            <button class="btn2 ml12" v-on:click="btn_back">返回</button>
        </div>
    </el-dialog>
    <el-dialog title="我的库存" :lock-scroll="false" width="50%" :visible.sync="dialogProductVisible" :close-on-click-modal="false">
        <myproduct v-on:child-say="listenToMyStorage" ref="ref_product"></myproduct>
    </el-dialog>
    <el-dialog title="新增付款人" :lock-scroll="false" width="30%" :visible.sync="dialogPayerVisible" :close-on-click-modal="false">
        <my-payer-mini ref="payer"></my-payer-mini>
        <div slot="footer" class="dialog-footer">
            <button v-on:click="dialogPayerVisible = false" class="btn1">取 消</button>
            <button v-on:click="onSubmit_Payer()" class="btn2 ml12">确 定</button>
        </div>
    </el-dialog>
    <el-dialog title="新增收货地址" :lock-scroll="false" width="30%" :visible.sync="dialogConsigneeVisible" :close-on-click-modal="false">
        <my-consignee ref="consignee"></my-consignee>
        <div slot="footer" class="dialog-footer">
            <button v-on:click="dialogConsigneeVisible = false" class="btn1">取 消</button>
            <button v-on:click="onSubmit_Consignee()" class="btn2 ml12">确 定</button>
        </div>
    </el-dialog>
    <el-dialog title="新增货物特殊处理要求" :lock-scroll="false" width="30%" :visible.sync="dialogGoodsVisible" :close-on-click-modal="false">
        <my-goods ref="goods"></my-goods>
        <div slot="footer" class="dialog-footer">
            <button v-on:click="dialogGoodsVisible = false" class="btn1">取 消</button>
            <button v-on:click="onSubmit_Goods" class="btn2 ml12">确 定</button>
        </div>
    </el-dialog>
</div>
<script src="~/Scripts/areaData.js"></script>
@{Html.RenderAction("_PartialMyStorage", "Storages", new { frompage = "Delivery" });}
@{Html.RenderAction("_SimplePayer", "Orders", new { useDefaultMethord = true, useDefaultCurrency = true, });}
@{Html.RenderAction("_ParticalConsignee", "Account");}
@{Html.RenderAction("_PartialSpecialRequirements", "Orders");}
<script src="~/Scripts/clipboard.min.js"></script>
<script>
    var vDeliveryAdd = new Vue({
        el: "#vDeliveryAdd",
        data: function () {
            var that = this;
            //验证代收货款
            var validateRecievePrice = function (rule, value, callback) {
                if (value != '' && value != null) {
                    if (!ValidDecimal(value)) {
                        callback(new Error('请输入正确的金额'));
                    }
                }
                callback();
            };
            return {
                formData: @Html.Raw(Json.Encode(Model)),  //表单数据
                baseData: {}, //基础数据
                radioOptions: [{ value: false, text: "否" }, { value: true, text: "是" }],
                totalNum: 0,//总数量
                totalPrice: 0,//总金额
                cascaderConfig: {
                    label: 'n',
                    value: 'n',
                    children: 's'
                },
                AddressLists: $.pccData[0].s.filter(function (data) { if (data.n == "香港") { return data } }), //省市区三级联动数据
                orderid: "",
                //验证规则
                rules: {
                    RecievePrice: [{ required: true, validator: validateRecievePrice, trigger: 'blur' }],
                },
                pickerOptions: {
                    disabledDate: function (time) {
                        var today = new Date();
                        today.setDate(today.getDate() - 1);
                        return time < today;
                    },
                },
                PayerOptions: [], //支付人
                dialogProductVisible: false,
                dialogPayerVisible: false,
                CompanyBankOptions: [],
                dialogConsigneeVisible: false,
                dialogSuccessVisible: false,
                dialogGoodsVisible: false,
                PayerMethodName: "",
                PayerCurrencyName: "",

                TitleText:'',
                PayeeSelect:1,
                TitleSelect: 1,

                PayerMethordOptions: [], // 付款方式选项
                PayerCurrencyOptions: [], // 付款币种选项
            }
        },
        watch: {
            PickupTime: function (val) {
                if (val != null && val != "") {
                    this.formData.PickupTimeStr = this.dateToString(val);
                }
            },
            //PayerID: function (value) {
            //    var that = this;
            //    that.formData.PayerMethod = "";
            //    that.formData.PayerCurrency = "";
            //    that.PayerMethodName = "";
            //    that.PayerCurrencyName = "";
            //    that.PayerOptions.filter(function (val) {
            //        if (val.value == value) {
            //            that.formData.PayerMethod =  val.Method;
            //            that.formData.PayerCurrency = val.Currency;
            //            that.PayerMethodName = val.MethodDec;
            //            that.PayerCurrencyName = val.CurrencyDec;

            //            //如果付款方式是支票, 配合界面, 默认支票抬头设置为 $('#hkTitle').text()
            //            if(that.formData.PayerMethod == 5) {
            //                that.formData.CheckTitle = $('#hkTitle1').text();
            //            }
            //        }
            //    });
            //},
            PayerMethod: function (value) {
                var that = this;
                //如果付款方式是支票, 配合界面, 默认支票抬头设置为 $('#hkTitle').text()
                if (value == "5") {
                    that.formData.CheckTitle = $('#hkTitle1').text();
                }
            },
            WaybillType: function (val) {
                this.$refs["ruleForm"].clearValidate();
            },
            TitleSelect: function(val) {
                if (val == 1) {
                    this.formData.CheckTitle = $('#hkTitle').text();
                } else {
                    this.formData.CheckTitle = this.TitleText;
                }
            },
            TitleText: function(val) {
                if(this.TitleSelect == 2) {
                    this.formData.CheckTitle = val;
                }
            },
            IsEntry: function(val) {
                //是否入账选否 && 支付方式为支票, 则 支票抬头选2
                if(val == false && this.formData.PayerMethod == 5) {
                    this.TitleSelect = 2;
                }
            },
            HuoZhiCurrency: function (val, oldVal) {
                //如果当前选择的币种是一个有效值, 并且如果下单的型号列表中有型号, 列表中型号有效的币种需要与这个币种一致
                //if(val != null && val != undefined && val != "" 
                //        && this.formData.OrderItems != null && this.formData.OrderItems != undefined && this.formData.OrderItems.length > 0) {
                //    var isCurrencyDiff = false;
                //    for(var i = 0; i < this.formData.OrderItems.length; i++) {
                //        if(val != this.formData.OrderItems[i].CurrencyInt) {
                //            isCurrencyDiff = true;
                //            break;
                //        }
                //    }
                //    if(isCurrencyDiff) {
                //        this.formData.Currency = oldVal;
                //        this.onAlert("error", "货值币种需要与选择库存型号的币种一致");
                //        return;
                //    }
                //}
                
            },
            IsRecieve: function (val, oldVal) {
                if (val != oldVal && val == true) {
                    this.formData.RecievePrice = this.totalPrice;
                }
            },
        },
        computed: {
            Currency: function () {
                return this.formData.Currency;
            },
            PayerID: function (value) {
                return this.formData.PayerID;
            },
            PickupTime: function () {
                return this.formData.PickupTime;
            },
            WaybillType: function () {
                return this.formData.WaybillType;
            },
            IsEntry: function() {
                return this.formData.IsEntry;
            },
            HuoZhiCurrency: function() {
                return this.formData.Currency;
            },
            PayerMethod: function (value) {
                return this.formData.PayerMethod;
            },
            IsRecieve: function () {
                return this.formData.IsRecieve;
            },
        },
        methods: {
            onSubmit_Goods: function () {
                var that = this;
                this.$refs.goods.$refs.form1.validate(function (valid) {
                    if (valid) {
                        var formData = that.$refs.goods.form1;
                        if ((formData.FileName == "" || formData.FileName == null) && formData.NameValue == '1' && formData.Type == '1') {  //贴标签
                            that.onAlert("error", "请上传标签文件");
                            return;
                        }
                        var arr = that.formData.SpecialGoods;
                        arr.push(formData)
                        that.formData.SpecialGoods = JSON.parse(JSON.stringify(arr));
                        that.dialogGoodsVisible = false;
                    } else {
                        //验证失败
                    }
                });

            },
            //特殊物品打开弹窗
            openGoods: function () {
                var that = this;
                that.dialogGoodsVisible = true;
                setTimeout(function () {
                    that.$refs.goods.form1.Type = "";
                }, 0)
            },
            //删除特殊物品
            del_goods: function (i) {
                this.formData.SpecialGoods.splice(i, 1);
            },
            //验证总价
            validTotalPrice: function (row, valuetext) {
                var that = this;
                if (!ValidDecimal(row[valuetext])) {
                    this.$nextTick(function() {
                        row[valuetext] = "0.00";

                        that.calSum();
                    });
                }
                if (!ValidDecimal(row[valuetext])) {
                    this.$nextTick(function() {
                        if (valuetext == 'Quantity') {
                            row[valuetext] = "0";
                        } else {
                            row[valuetext] = "0.0000";
                        }

                        that.calSum();
                    });
                } else {
                    if (valuetext == 'Quantity') {
                        row[valuetext] = parseInt(row[valuetext]);
                    } else {
                        row[valuetext] = parseFloat(row[valuetext]).toFixed(4);
                    }

                    this.calSum();
                }

                // this.calSum(); 原先这里的 this.calSum(); 放到上面去，为了能在 $nextTick 里最后执行到
            },
            clearZero: function(row, val) {
                if (row[val] == "0" || row[val] == "0.0000") {
                    row[val] = "";
                }
            },
            //删除产品子项
            handleSubItemDelete: function (index) {
                this.formData.OrderItems.splice(index, 1);
                this.calSum();
            },
            calSum: function () {
                var that = this;
                that.totalNum = 0;
                that.totalPrice = 0;
                this.formData.OrderItems.forEach(function (column, index) {
                    var num = Number(column.Quantity);
                    var price = Number(column.UnitPrice);
                    if (!isNaN(num)) {
                        that.totalNum = accAdd(that.totalNum, num)
                    }
                    if (!isNaN(price)) {

                    }
                    if (!isNaN(num) && !isNaN(price)) {
                        var total = (num * price).toFixed(2);
                        that.formData.OrderItems[index].TotalPrice = total;
                        that.totalPrice = accAdd(that.totalPrice, total).toFixed(2);
                    }
                });
            },
            //验证整数和小数
            validDecimalText: function (valuetext) {
                if (!ValidDecimal(this.formData[valuetext])) {
                    this.$nextTick(function () {
                        this.formData[valuetext] = 0;
                    })
                }
            },
            //删除文件
            del_file: function (i, column) {
                this.formData[column].splice(i, 1);
            },
            httpRequestFile: function (options, column) {
                var that = this;
                UploadFile(options, '/Files/UploadPickUpFile', function (res) {
                    if (res.type) {
                        var list = JSON.parse(res.file);
                        that.formData[column] = [];
                        that.formData[column].push(list);
                    } else {
                        that.onAlert("error", res.msg)
                    }
                });
            },
            //上传多文件
            httpRequestFiles: function (options, column) {
                var that = this;
                UploadFile(options, '/Files/UploadOrderFile', function (res) {
                    if (res.type) {
                        var list = JSON.parse(res.file);
                        that.formData[column].push(list);
                    } else {
                        that.onAlert("error", res.msg)
                    }
                });
            },
            onPayer: function () {
                this.getPayerOptions();
            },
            //获取支付人
            getPayerOptions: function () {
                var that = this;
                axios({
                    url: "/Orders/GetPayerOptions",
                    method: "post",
                    data: {
                    },
                }).then(function (res) {
                    if (res.data.type == "success") {
                        that.PayerOptions = JSON.parse(res.data.data);
                    }
                    else {
                        that.onAlert(res.data.type, res.data.msg);
                    }
                }).catch(function (error) {
                    that.onAlert("warning", "系统发生错误，请稍后重试或联系客服");
                });
            },
            onSubmit_Payer: function () {
                var that = this;
                this.$refs.payer.$refs.form1.validate(function (valid) {
                    if (valid) {
                        that.dialogPayerVisible = false;
                        axios({
                            url: "/Orders/SubmitPayer",
                            method: "post",
                            data: that.$refs.payer.form1,
                        }).then(function (response) {
                            that.$refs.payer.$refs.form1.resetFields();
                            that.onAlert(response.data.type, response.data.msg);
                            if (response.data.type == "success") {
                                that.getPayerOptions();
                            }
                        }).catch(function (error) {
                            that.onAlert("warning", "系统发生错误，请稍后重试或联系客服");
                        });
                    } else {
                        //验证失败
                    }
                });
            },
            //onCompanyBank: function () {
            //    var that = this;
            //    that.$refs.ruleForm.validateField('Currency', function (data) {
            //        if (data == "") {
            //            that.getCompanyBankOptions();
            //        } else {
            //            setTimeout(function () {
            //                var isError = document.getElementsByClassName("is-error");
            //                isError[0].querySelector('input').focus();
            //            }, 1)
            //            return false;
            //        }
            //    });
            //},
            ////获取公司受益人
            //getCompanyBankOptions: function () {
            //    var that = this;
            //    axios({
            //        url: "/Orders/GetCompanyBankOptions",
            //        method: "post",
            //        data: {
            //            currency: that.formData.Currency
            //        },
            //    }).then(function (res) {
            //        if (res.data.type == "success") {
            //            that.CompanyBankOptions = JSON.parse(res.data.data);
            //        }
            //        else {
            //            that.onAlert(res.data.type, res.data.msg);
            //        }
            //    }).catch(function (error) {
            //        that.onAlert("warning", "系统发生错误，请稍后重试或联系客服");
            //    });
            //},
            //改变收货地址触发
            handConsigneeChange: function () {
                var that = this;
                this.baseData.ReceiveOptions.filter(function (value) {
                    if (value.value == that.formData.ClientConsignee) {
                        that.formData.ClientConsigneeAddress = value.address;
                        that.formData.ClientConsigneeName = value.name;
                        that.formData.ClientContactMobile = value.mobile;
                        that.formData.ClientConsigneeCompany = value.text;
                    }
                });
            },
            //刷新收货人
            refreshConsignee: function () {
                var that = this;
                axios({
                    url: "/Account/GetConsigneeAddress",
                    method: "post",
                    data: {},
                }).then(function (response) {
                    if (response.data.type == "success") {
                        that.baseData.ReceiveOptions = JSON.parse(response.data.data);
                        that.formData.ClientConsignee = that.baseData.ReceiveOptions[0].value;
                        that.handConsigneeChange();
                    }
                }).catch(function (error) {
                    that.onAlert("warning", "系统发生错误，请稍后重试或联系客服");
                });
            },
            onSubmit_Consignee: function () {
                var that = this;
                this.$refs.consignee.$refs.form1.validate(function (valid) {
                    if (valid) {
                        that.dialogConsigneeVisible = false;
                        axios({
                            url: "/Account/ConsigneeSubmit",
                            method: "post",
                            data: that.$refs.consignee.form1,
                        }).then(function (response) {
                            that.$refs.consignee.$refs.form1.resetFields();
                            that.onAlert(response.data.type, response.data.msg);
                            if (response.data.type == "success") {
                                that.refreshConsignee();
                            }
                        }).catch(function (error) {
                            that.onAlert("warning", "系统发生错误，请稍后重试或联系客服");
                        });
                    } else {
                        //验证失败
                    }
                });
            },
            //返回新增页面
            btn_back: function () {
                window.location.href = "/Orders/DeliveryAdd";
            },
            //详情页面
            orderDetails: function () {
                commonSkipUrl(this.orderid, '/Orders/DeliveryDetail', "/" + "@(ViewContext.RouteData.Values["controller"].ToString())"
                                                                    + "/" + "@(ViewContext.RouteData.Values["action"].ToString())");
            },
            validProduct: function () {
                var items = this.formData.OrderItems;
                if (items.length == 0) {
                    this.onAlert("error", "请录入产品信息");
                    return;
                }
                if (items.length > 100) {
                    this.onAlert("error", "产品明细不超过100条");
                    return;
                }

                //如果当前选择的币种是一个有效值, 并且如果下单的型号列表中有型号, 列表中型号有效的币种需要与这个币种一致
                //if(this.formData.Currency != null && this.formData.Currency != undefined && this.formData.Currency != "" 
                //        && items != null && items != undefined && items.length > 0) {
                //    var isCurrencyDiff = false;
                //    for(var i = 0; i < items.length; i++) {
                //        if(this.formData.Currency != items[i].CurrencyInt) {
                //            isCurrencyDiff = true;
                //            break;
                //        }
                //    }
                //    if(isCurrencyDiff) {
                //        //this.formData.Currency = oldVal;
                //        this.onAlert("error", "货值币种需要与选择库存型号的币种一致");
                //        return;
                //    }
                //}

                for (var i = 0; i < items.length; i++) {
                    if (items[i].Name != null && items[i].Name.length > 150) {
                        this.onAlert("error", "第" + (i + 1) + "行产品明细的品名长度超过限制");
                        return;
                    }
                    else if (items[i].Manufacturer == null || items[i].Manufacturer == "") {
                        this.onAlert("error", "第" + (i + 1) + "行产品明细的品牌不能为空");
                        return;
                    }
                    else if (items[i].Manufacturer != null && items[i].Manufacturer.length > 150) {
                        this.onAlert("error", "第" + (i + 1) + "行产品明细的品牌长度超过限制");
                        return;
                    }
                    else if (items[i].PartNumber == null || items[i].PartNumber == "") {
                        this.onAlert("error", "第" + (i + 1) + "行产品明细的型号不能为空");
                        return;
                    } else if (items[i].Origin == null || items[i].Origin == "") {
                        this.onAlert("error", "第" + (i + 1) + "行产品明细的产地不能为空");
                        return;
                    }
                    else if (items[i].PartNumber != null && items[i].PartNumber.length > 150) {
                        this.onAlert("error", "第" + (i + 1) + "行产品明细的型号长度超过限制");
                        return;
                    }
                    else if (parseFloat(items[i].Quantity) == 0) {
                        this.onAlert("error", "第" + (i + 1) + "行产品明细的数量不能为0");
                        return;
                    }
                    else if (parseFloat(items[i].Quantity) > parseFloat(items[i].StockNum)) {
                        this.onAlert("error", "第" + (i + 1) + "行产品明细的数量不能大于库存数量【" + parseFloat(items[i].StockNum) + "】");
                        return;
                     }
                    else if (items[i].Unit == null || items[i].Unit == "") {
                        this.onAlert("error", "第" + (i + 1) + "行产品明细的单位不能为空");
                        return;
                    }
                    //else if (items[i].UnitPrice == null || items[i].UnitPrice == "") {
                    //    this.onAlert("error", "第" + (i + 1) + "行产品明细的进单价不能为空");
                    //    return;
                    //}
                    //else if (parseFloat(items[i].UnitPrice) == 0) {
                    //    this.onAlert("error", "第" + (i + 1) + "行产品明细的单价不能为零");
                    //    return;
                    //}

                    // 判断单价之前，将非数字的单价弄成0
                    if (!ValidDecimal(items[i].UnitPrice) || isNaN(parseFloat(items[i].UnitPrice))) {
                        items[i].UnitPrice = '0.0000';
                    }
                    // 当“是否代收货款选择”选择“是”时，要求每个型号单价都要大于0
                    if (this.IsRecieve) {
                        if (!ValidDecimal(items[i].UnitPrice) || isNaN(parseFloat(items[i].UnitPrice)) || parseFloat(items[i].UnitPrice) <= 0) {
                            this.onAlert("error", "已选择需要代收货款，第" + (i + 1) + "行产品明细的单价要求大于0");
                            return;
                        }
                    }

                }
                return true;
            },
            onSubmit: function () {
                var that = this;
                if (that.validProduct()) {
                    that.$refs.ruleForm.validate(function (valid) {
                        if (valid) {
                            if(that.formData.IsRecieve && that.formData.RecievePrice <= 0) {
                                that.onAlert("warning", "收款金额必须大于0！");
                                $('#RecievePriceInput').focus();
                                return false;
                            }
                            if (that.formData.IsRecieve && that.formData.RecievePrice > parseFloat(that.totalPrice)) {
                                that.onAlert("warning", "收款金额不能大于总价！");
                                $('#RecievePriceInput').focus();
                                return false;
                            }
                            //付款方式 == 支票 && 是否入账选是 && TitleSelect == 2 && TitleText == ''
                            if (that.formData.IsRecieve && that.formData.PayerMethod == 5 && that.formData.IsEntry && that.TitleSelect == 2 && that.TitleText == '') {
                                that.onAlert("warning", "请填写支票抬头！");
                                $('#inputTitle').focus();
                                return false;
                            }
                            //付款方式 == 支票 && 是否入账选否 && TitleText == ''
                            if (that.formData.IsRecieve && that.formData.PayerMethod == 5 && !that.formData.IsEntry && that.TitleText == '') {
                                that.onAlert("warning", "请填写支票抬头！");
                                $('#inputTitle').focus();
                                return false;
                            }
                            const loading = that.$loading({
                                lock: false,
                                text: 'Loading',
                                spinner: 'el-icon-loading',
                                background: 'rgba(0, 0, 0, 0.7)'
                            });
                            axios({
                                url: "/Orders/DeliverySubmit",
                                method: "post",
                                data: {
                                    data: JSON.stringify(that.formData),
                                },
                            }).then(function (response) {
                                loading.close();
                                if (response.data.type == "error") {
                                    that.onAlert(response.data.type, response.data.msg);
                                } else {
                                    that.orderid = response.data.data;
                                    that.dialogSuccessVisible = true;
                                }
                            }).catch(function (error) {
                                loading.close();
                                that.onAlert("warning", error);
                            });
                        } else {
                            setTimeout(function () {
                                var isError = document.getElementsByClassName("is-error");
                                isError[0].querySelector('input').focus();
                            }, 1)
                            return false;
                        }
                    });
                }
            },
            httpRequestPacking: function () {
                var that = this;
                UploadFile(options, '/Files/UploadOrderFile', function (res) {
                    if (res.type) {
                        var list = JSON.parse(res.file);
                        that.formData.PackingFiles.push(list);
                    } else {
                        that.onAlert("error", res.msg)
                    }
                });
            },
            dateToString: function (date) {
                var year = date.getFullYear();
                var month = (date.getMonth() + 1).toString();
                var day = (date.getDate()).toString();
                if (month.length == 1) {
                    month = "0" + month;
                }
                if (day.length == 1) {
                    day = "0" + day;
                }
                var dateTime = year + "-" + month + "-" + day;
                return dateTime;
            },
            // 产品上传成功后的回调
            uploadSuccess: function (response) {
                var that = this;
                if (response.type == "error") {
                    that.onAlert(response.type, response.msg);
                } else {
                    var list = JSON.parse(response.data);
                    $.each(list, function (i, value) {
                        var obj = {
                            ID: value.ID,
                            Name: value.Name,
                            Manufacturer: value.Manufacturer,
                            PartNumber: value.PartNumber,
                            Origin: value.Origin,
                            Quantity: value.Quantity,
                            Unit: value.Unit,
                            TotalPrice: value.TotalPrice.toFixed(2),
                        };
                        that.formData.OrderItems.push(obj);
                    });
                    this.calSum();
                }
            },
            listenToMyStorage: function (list) {
                var that = this;

                //验证币种 首先获取 1. 货值币种 2. 型号列表中的第一条的币种
                //循环 选择的库存, 如果1/2都没有, 再查看添加的这些型号是否是同一种币种
                //如果以上都没有问题, 就直接可以添加了, 并把货值币种赋值为 这次添加的币种
                
                var theformDataCurrency = that.formData.Currency;
                if(theformDataCurrency == null || theformDataCurrency == undefined) {
                    theformDataCurrency = "";
                }

                var theformDataOrderItemsFirstCurrency = "";
                if(that.formData.OrderItems != null && that.formData.OrderItems != undefined && that.formData.OrderItems.length > 0) {
                    if(that.formData.OrderItems[0].CurrencyInt != null && that.formData.OrderItems[0].CurrencyInt != undefined && that.formData.OrderItems[0].CurrencyInt != "") {
                        theformDataOrderItemsFirstCurrency = that.formData.OrderItems[0].CurrencyInt;
                    }
                }

                //如果有货值币种, 并且想加入库存型号, 检查每一个要加入的库存型号的币种是否与货值币种相同
                //if(theformDataCurrency != "" && list.length > 0) {
                //    var isCurrencyDiff = false;
                //    for(var i = 0; i < list.length; i++) {
                //        if(theformDataCurrency != list[i].CurrencyInt) {
                //            isCurrencyDiff = true;
                //            break;
                //        }                        
                //    }
                //    if(isCurrencyDiff) {
                //        that.onAlert("error", "导入型号的币种需要与当前货值币种一致");
                //        return;
                //    }
                //}
                
                //如果下单页面列表中有型号, 并且想加入库存型号, 检查每一个要加入的库存型号的币种是否与下单页面列表中有型号的币种相同
                //if(theformDataOrderItemsFirstCurrency != "" && list.length > 0) {
                //    var isCurrencyDiff = false;
                //    for(var i = 0; i < list.length; i++) {
                //        if(theformDataOrderItemsFirstCurrency != list[i].CurrencyInt) {
                //            isCurrencyDiff = true;
                //            break;
                //        }                        
                //    }
                //    if(isCurrencyDiff) {
                //        that.onAlert("error", "导入型号的币种需要与已导入型号的币种(" + that.formData.OrderItems[0].CurrencyShortName + ")一致");
                //        return;
                //    }
                //}

                //如果货值币种没有选择, 下单页面列表中没有型号, 则判断想加入库存型号的币种是不是一致的
                //if(list.length > 0) {
                //    var isCurrencyDiff = false;
                //    var theListFirstCurrencyInt = list[0].CurrencyInt;
                //    for(var i = 0; i < list.length; i++) {
                //        if(theListFirstCurrencyInt != list[i].CurrencyInt) {
                //            isCurrencyDiff = true;
                //            break;
                //        }                        
                //    }
                //    if(isCurrencyDiff) {
                //        that.onAlert("error", "导入型号的币种需要一致");
                //        return;
                //    }
                //}


                that.dialogProductVisible = false;
                if (list.length > 0) {
                    $.each(list, function (i, value) {
                        var flag = true;
                        $.each(that.formData.OrderItems, function (index, v) {
                            if (v.StorageID == value.ID) {
                                flag = false;
                                if (v.StockNum < accAdd(v.Quantity ,value.Num)) {
                                    v.Quantity = v.StockNum
                                }
                                else {
                                    v.Quantity = accAdd(v.Quantity ,value.Num);
                                }
                                return;
                            }
                        });
                        if (flag) {
                            var obj = {
                                StorageID:value.ID,
                                Name: value.CustomsName, //品名
                                Manufacturer: value.Manufacturer, //品牌
                                PartNumber: value.PartNumber, //型号
                                Origin: value.Origin, //产地
                                Quantity: Number(value.Num), //数量
                                StockNum: Number(value.Quantity), //库存数量
                                Unit: 7, //单位
                                TotalPrice: Number(value.Quantity) * Number(value.UnitPrice), //总价
                                UnitPrice: '', // Number(value.UnitPrice), //单价
                                InputID: value.InputID,

                                CurrencyShortName: value.CurrencyShortName,
                                CurrencyInt: value.CurrencyInt,
                            };
                            that.formData.OrderItems.push(obj);
                        }
                    });
                }
                this.calSum();
            },
            //消息提示框
            onAlert: function (type, message) {
                this.$message({
                    message: message,
                    type: type,
                    offset:100,
                });
            },
            GetDateFormat: function (str) {
                return new Date(parseInt(str.substr(6, 13)));
            },
            PayerVisible2: function() {
                var that = this;
                this.dialogPayerVisible=true;
                setTimeout(function() {
                        that.$refs.payer.UseMethordOptions = that.$refs.payer.baseData.MethordOptions22;
                    },
                    0)
            },
            copyOurAccount() {
                var that = this;
                var clipboard = new ClipboardJS(".cobyOrderSn");
                clipboard.on('success', function () {
                    that.onAlert("success", "复制成功");
                    clipboard.destroy();
                });
                clipboard.on('error', function () {
                    that.onAlert("error", "复制失败");
                    clipboard.destroy();
                });
            },
            openDialogConsignee() {
                var that = this;
                this.dialogConsigneeVisible=true;
                setTimeout(function() {
                        that.$refs.consignee.IsHideSome = true; //隐藏一些东西
                        that.$refs.consignee.form1.Place = that.$refs.consignee.form1.PlaceDefault; //填充默认的国家地区
                    },
                    0)
            },
        },
        mounted: function () {
            var options = @Html.Raw(Json.Encode(@ViewBag.Options)); //加载基础数据
            this.baseData = options;
        },
    });

</script>

