#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.42000
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace Layer.Data.Sqls.ScWms
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="ScWms")]
	public partial class SqlDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region 可扩展性方法定义
    partial void OnCreated();
    partial void InsertCompanies(Companies instance);
    partial void UpdateCompanies(Companies instance);
    partial void DeleteCompanies(Companies instance);
    partial void InsertWayItems(WayItems instance);
    partial void UpdateWayItems(WayItems instance);
    partial void DeleteWayItems(WayItems instance);
    partial void InsertContacts(Contacts instance);
    partial void UpdateContacts(Contacts instance);
    partial void DeleteContacts(Contacts instance);
    partial void InsertEntryNotices(EntryNotices instance);
    partial void UpdateEntryNotices(EntryNotices instance);
    partial void DeleteEntryNotices(EntryNotices instance);
    partial void InsertExitFiles(ExitFiles instance);
    partial void UpdateExitFiles(ExitFiles instance);
    partial void DeleteExitFiles(ExitFiles instance);
    partial void InsertExitNotices(ExitNotices instance);
    partial void UpdateExitNotices(ExitNotices instance);
    partial void DeleteExitNotices(ExitNotices instance);
    partial void InsertExpenses(Expenses instance);
    partial void UpdateExpenses(Expenses instance);
    partial void DeleteExpenses(Expenses instance);
    partial void InsertFlowStorages(FlowStorages instance);
    partial void UpdateFlowStorages(FlowStorages instance);
    partial void DeleteFlowStorages(FlowStorages instance);
    partial void InsertForms(Forms instance);
    partial void UpdateForms(Forms instance);
    partial void DeleteForms(Forms instance);
    partial void InsertInApplies(InApplies instance);
    partial void UpdateInApplies(InApplies instance);
    partial void DeleteInApplies(InApplies instance);
    partial void InsertInputs(Inputs instance);
    partial void UpdateInputs(Inputs instance);
    partial void DeleteInputs(Inputs instance);
    partial void InsertOtherProducts(OtherProducts instance);
    partial void UpdateOtherProducts(OtherProducts instance);
    partial void DeleteOtherProducts(OtherProducts instance);
    partial void InsertOutApplies(OutApplies instance);
    partial void UpdateOutApplies(OutApplies instance);
    partial void DeleteOutApplies(OutApplies instance);
    partial void InsertOutputs(Outputs instance);
    partial void UpdateOutputs(Outputs instance);
    partial void DeleteOutputs(Outputs instance);
    partial void InsertParties(Parties instance);
    partial void UpdateParties(Parties instance);
    partial void DeleteParties(Parties instance);
    partial void InsertPickings(Pickings instance);
    partial void UpdatePickings(Pickings instance);
    partial void DeletePickings(Pickings instance);
    partial void InsertPrimaryKeys(PrimaryKeys instance);
    partial void UpdatePrimaryKeys(PrimaryKeys instance);
    partial void DeletePrimaryKeys(PrimaryKeys instance);
    partial void InsertReports(Reports instance);
    partial void UpdateReports(Reports instance);
    partial void DeleteReports(Reports instance);
    partial void InsertRunStorages(RunStorages instance);
    partial void UpdateRunStorages(RunStorages instance);
    partial void DeleteRunStorages(RunStorages instance);
    partial void InsertShelves(Shelves instance);
    partial void UpdateShelves(Shelves instance);
    partial void DeleteShelves(Shelves instance);
    partial void InsertSortings(Sortings instance);
    partial void UpdateSortings(Sortings instance);
    partial void DeleteSortings(Sortings instance);
    partial void InsertStandardProducts(StandardProducts instance);
    partial void UpdateStandardProducts(StandardProducts instance);
    partial void DeleteStandardProducts(StandardProducts instance);
    partial void InsertStocks(Stocks instance);
    partial void UpdateStocks(Stocks instance);
    partial void DeleteStocks(Stocks instance);
    partial void InsertStroeStorages(StroeStorages instance);
    partial void UpdateStroeStorages(StroeStorages instance);
    partial void DeleteStroeStorages(StroeStorages instance);
    partial void InsertTransferItems(TransferItems instance);
    partial void UpdateTransferItems(TransferItems instance);
    partial void DeleteTransferItems(TransferItems instance);
    partial void InsertTransfers(Transfers instance);
    partial void UpdateTransfers(Transfers instance);
    partial void DeleteTransfers(Transfers instance);
    partial void InsertTransferSteps(TransferSteps instance);
    partial void UpdateTransferSteps(TransferSteps instance);
    partial void DeleteTransferSteps(TransferSteps instance);
    partial void InsertTransportTerms(TransportTerms instance);
    partial void UpdateTransportTerms(TransportTerms instance);
    partial void DeleteTransportTerms(TransportTerms instance);
    partial void InsertWarehoures(Warehoures instance);
    partial void UpdateWarehoures(Warehoures instance);
    partial void DeleteWarehoures(Warehoures instance);
    partial void InsertWaybills(Waybills instance);
    partial void UpdateWaybills(Waybills instance);
    partial void DeleteWaybills(Waybills instance);
    partial void InsertWayFiles(WayFiles instance);
    partial void UpdateWayFiles(WayFiles instance);
    partial void DeleteWayFiles(WayFiles instance);
    #endregion
		
		public SqlDataContext() : 
				base(global::Layer.Data.Properties.Settings.Default.ScWmsConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public SqlDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public SqlDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public SqlDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public SqlDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Companies> Companies
		{
			get
			{
				return this.GetTable<Companies>();
			}
		}
		
		public System.Data.Linq.Table<WayItems> WayItems
		{
			get
			{
				return this.GetTable<WayItems>();
			}
		}
		
		public System.Data.Linq.Table<Contacts> Contacts
		{
			get
			{
				return this.GetTable<Contacts>();
			}
		}
		
		public System.Data.Linq.Table<EntryNotices> EntryNotices
		{
			get
			{
				return this.GetTable<EntryNotices>();
			}
		}
		
		public System.Data.Linq.Table<ExitFiles> ExitFiles
		{
			get
			{
				return this.GetTable<ExitFiles>();
			}
		}
		
		public System.Data.Linq.Table<ExitNotices> ExitNotices
		{
			get
			{
				return this.GetTable<ExitNotices>();
			}
		}
		
		public System.Data.Linq.Table<Expenses> Expenses
		{
			get
			{
				return this.GetTable<Expenses>();
			}
		}
		
		public System.Data.Linq.Table<FlowStorages> FlowStorages
		{
			get
			{
				return this.GetTable<FlowStorages>();
			}
		}
		
		public System.Data.Linq.Table<Forms> Forms
		{
			get
			{
				return this.GetTable<Forms>();
			}
		}
		
		public System.Data.Linq.Table<InApplies> InApplies
		{
			get
			{
				return this.GetTable<InApplies>();
			}
		}
		
		public System.Data.Linq.Table<Inputs> Inputs
		{
			get
			{
				return this.GetTable<Inputs>();
			}
		}
		
		public System.Data.Linq.Table<OtherProducts> OtherProducts
		{
			get
			{
				return this.GetTable<OtherProducts>();
			}
		}
		
		public System.Data.Linq.Table<OutApplies> OutApplies
		{
			get
			{
				return this.GetTable<OutApplies>();
			}
		}
		
		public System.Data.Linq.Table<Outputs> Outputs
		{
			get
			{
				return this.GetTable<Outputs>();
			}
		}
		
		public System.Data.Linq.Table<Parties> Parties
		{
			get
			{
				return this.GetTable<Parties>();
			}
		}
		
		public System.Data.Linq.Table<Pickings> Pickings
		{
			get
			{
				return this.GetTable<Pickings>();
			}
		}
		
		public System.Data.Linq.Table<PrimaryKeys> PrimaryKeys
		{
			get
			{
				return this.GetTable<PrimaryKeys>();
			}
		}
		
		public System.Data.Linq.Table<Reports> Reports
		{
			get
			{
				return this.GetTable<Reports>();
			}
		}
		
		public System.Data.Linq.Table<RunStorages> RunStorages
		{
			get
			{
				return this.GetTable<RunStorages>();
			}
		}
		
		public System.Data.Linq.Table<Shelves> Shelves
		{
			get
			{
				return this.GetTable<Shelves>();
			}
		}
		
		public System.Data.Linq.Table<Sortings> Sortings
		{
			get
			{
				return this.GetTable<Sortings>();
			}
		}
		
		public System.Data.Linq.Table<StandardProducts> StandardProducts
		{
			get
			{
				return this.GetTable<StandardProducts>();
			}
		}
		
		public System.Data.Linq.Table<Stocks> Stocks
		{
			get
			{
				return this.GetTable<Stocks>();
			}
		}
		
		public System.Data.Linq.Table<StroeStorages> StroeStorages
		{
			get
			{
				return this.GetTable<StroeStorages>();
			}
		}
		
		public System.Data.Linq.Table<TransferItems> TransferItems
		{
			get
			{
				return this.GetTable<TransferItems>();
			}
		}
		
		public System.Data.Linq.Table<Transfers> Transfers
		{
			get
			{
				return this.GetTable<Transfers>();
			}
		}
		
		public System.Data.Linq.Table<TransferSteps> TransferSteps
		{
			get
			{
				return this.GetTable<TransferSteps>();
			}
		}
		
		public System.Data.Linq.Table<TransportTerms> TransportTerms
		{
			get
			{
				return this.GetTable<TransportTerms>();
			}
		}
		
		public System.Data.Linq.Table<Warehoures> Warehoures
		{
			get
			{
				return this.GetTable<Warehoures>();
			}
		}
		
		public System.Data.Linq.Table<Waybills> Waybills
		{
			get
			{
				return this.GetTable<Waybills>();
			}
		}
		
		public System.Data.Linq.Table<WayFiles> WayFiles
		{
			get
			{
				return this.GetTable<WayFiles>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Companies")]
	public partial class Companies : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _ID;
		
		private string _Name;
		
		private int _Type;
		
		private System.Nullable<int> _Grade;
		
		private int _Status;
		
		private System.DateTime _CreateDate;
		
		private System.DateTime _UpdateDate;
		
		private string _Summary;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(string value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnTypeChanging(int value);
    partial void OnTypeChanged();
    partial void OnGradeChanging(System.Nullable<int> value);
    partial void OnGradeChanged();
    partial void OnStatusChanging(int value);
    partial void OnStatusChanged();
    partial void OnCreateDateChanging(System.DateTime value);
    partial void OnCreateDateChanged();
    partial void OnUpdateDateChanging(System.DateTime value);
    partial void OnUpdateDateChanged();
    partial void OnSummaryChanging(string value);
    partial void OnSummaryChanged();
    #endregion
		
		public Companies()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(150) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type", DbType="Int NOT NULL")]
		public int Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Grade", DbType="Int")]
		public System.Nullable<int> Grade
		{
			get
			{
				return this._Grade;
			}
			set
			{
				if ((this._Grade != value))
				{
					this.OnGradeChanging(value);
					this.SendPropertyChanging();
					this._Grade = value;
					this.SendPropertyChanged("Grade");
					this.OnGradeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="Int NOT NULL")]
		public int Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreateDate", DbType="DateTime NOT NULL")]
		public System.DateTime CreateDate
		{
			get
			{
				return this._CreateDate;
			}
			set
			{
				if ((this._CreateDate != value))
				{
					this.OnCreateDateChanging(value);
					this.SendPropertyChanging();
					this._CreateDate = value;
					this.SendPropertyChanged("CreateDate");
					this.OnCreateDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UpdateDate", DbType="DateTime NOT NULL")]
		public System.DateTime UpdateDate
		{
			get
			{
				return this._UpdateDate;
			}
			set
			{
				if ((this._UpdateDate != value))
				{
					this.OnUpdateDateChanging(value);
					this.SendPropertyChanging();
					this._UpdateDate = value;
					this.SendPropertyChanged("UpdateDate");
					this.OnUpdateDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Summary", DbType="NVarChar(300)")]
		public string Summary
		{
			get
			{
				return this._Summary;
			}
			set
			{
				if ((this._Summary != value))
				{
					this.OnSummaryChanging(value);
					this.SendPropertyChanging();
					this._Summary = value;
					this.SendPropertyChanged("Summary");
					this.OnSummaryChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.WayItems")]
	public partial class WayItems : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _ID;
		
		private string _WaybillID;
		
		private string _PackingIndex;
		
		private int _Quantity;
		
		private string _ProductID;
		
		private int _Currency;
		
		private decimal _UnitPrice;
		
		private System.Nullable<decimal> _Weight;
		
		private System.DateTime _CreateDate;
		
		private string _Note;
		
		private EntityRef<Waybills> _Waybills;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(string value);
    partial void OnIDChanged();
    partial void OnWaybillIDChanging(string value);
    partial void OnWaybillIDChanged();
    partial void OnPackingIndexChanging(string value);
    partial void OnPackingIndexChanged();
    partial void OnQuantityChanging(int value);
    partial void OnQuantityChanged();
    partial void OnProductIDChanging(string value);
    partial void OnProductIDChanged();
    partial void OnCurrencyChanging(int value);
    partial void OnCurrencyChanged();
    partial void OnUnitPriceChanging(decimal value);
    partial void OnUnitPriceChanged();
    partial void OnWeightChanging(System.Nullable<decimal> value);
    partial void OnWeightChanged();
    partial void OnCreateDateChanging(System.DateTime value);
    partial void OnCreateDateChanged();
    partial void OnNoteChanging(string value);
    partial void OnNoteChanged();
    #endregion
		
		public WayItems()
		{
			this._Waybills = default(EntityRef<Waybills>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WaybillID", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string WaybillID
		{
			get
			{
				return this._WaybillID;
			}
			set
			{
				if ((this._WaybillID != value))
				{
					if (this._Waybills.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnWaybillIDChanging(value);
					this.SendPropertyChanging();
					this._WaybillID = value;
					this.SendPropertyChanged("WaybillID");
					this.OnWaybillIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PackingIndex", DbType="VarChar(50)")]
		public string PackingIndex
		{
			get
			{
				return this._PackingIndex;
			}
			set
			{
				if ((this._PackingIndex != value))
				{
					this.OnPackingIndexChanging(value);
					this.SendPropertyChanging();
					this._PackingIndex = value;
					this.SendPropertyChanged("PackingIndex");
					this.OnPackingIndexChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Quantity", DbType="Int NOT NULL")]
		public int Quantity
		{
			get
			{
				return this._Quantity;
			}
			set
			{
				if ((this._Quantity != value))
				{
					this.OnQuantityChanging(value);
					this.SendPropertyChanging();
					this._Quantity = value;
					this.SendPropertyChanged("Quantity");
					this.OnQuantityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductID", DbType="VarChar(50)")]
		public string ProductID
		{
			get
			{
				return this._ProductID;
			}
			set
			{
				if ((this._ProductID != value))
				{
					this.OnProductIDChanging(value);
					this.SendPropertyChanging();
					this._ProductID = value;
					this.SendPropertyChanged("ProductID");
					this.OnProductIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Currency", DbType="Int NOT NULL")]
		public int Currency
		{
			get
			{
				return this._Currency;
			}
			set
			{
				if ((this._Currency != value))
				{
					this.OnCurrencyChanging(value);
					this.SendPropertyChanging();
					this._Currency = value;
					this.SendPropertyChanged("Currency");
					this.OnCurrencyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UnitPrice", DbType="Decimal(18,5) NOT NULL")]
		public decimal UnitPrice
		{
			get
			{
				return this._UnitPrice;
			}
			set
			{
				if ((this._UnitPrice != value))
				{
					this.OnUnitPriceChanging(value);
					this.SendPropertyChanging();
					this._UnitPrice = value;
					this.SendPropertyChanged("UnitPrice");
					this.OnUnitPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Weight", DbType="Decimal(18,7)")]
		public System.Nullable<decimal> Weight
		{
			get
			{
				return this._Weight;
			}
			set
			{
				if ((this._Weight != value))
				{
					this.OnWeightChanging(value);
					this.SendPropertyChanging();
					this._Weight = value;
					this.SendPropertyChanged("Weight");
					this.OnWeightChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreateDate", DbType="DateTime NOT NULL")]
		public System.DateTime CreateDate
		{
			get
			{
				return this._CreateDate;
			}
			set
			{
				if ((this._CreateDate != value))
				{
					this.OnCreateDateChanging(value);
					this.SendPropertyChanging();
					this._CreateDate = value;
					this.SendPropertyChanged("CreateDate");
					this.OnCreateDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Note", DbType="NVarChar(300)")]
		public string Note
		{
			get
			{
				return this._Note;
			}
			set
			{
				if ((this._Note != value))
				{
					this.OnNoteChanging(value);
					this.SendPropertyChanging();
					this._Note = value;
					this.SendPropertyChanged("Note");
					this.OnNoteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Waybills_WayItems", Storage="_Waybills", ThisKey="WaybillID", OtherKey="ID", IsForeignKey=true)]
		public Waybills Waybills
		{
			get
			{
				return this._Waybills.Entity;
			}
			set
			{
				Waybills previousValue = this._Waybills.Entity;
				if (((previousValue != value) 
							|| (this._Waybills.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Waybills.Entity = null;
						previousValue.WayItems.Remove(this);
					}
					this._Waybills.Entity = value;
					if ((value != null))
					{
						value.WayItems.Add(this);
						this._WaybillID = value.ID;
					}
					else
					{
						this._WaybillID = default(string);
					}
					this.SendPropertyChanged("Waybills");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Contacts")]
	public partial class Contacts : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _ID;
		
		private string _Name;
		
		private string _Email;
		
		private string _Mobile;
		
		private string _Tel;
		
		private string _CompanyID;
		
		private System.DateTime _CreateDate;
		
		private string _Summary;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(string value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnMobileChanging(string value);
    partial void OnMobileChanged();
    partial void OnTelChanging(string value);
    partial void OnTelChanged();
    partial void OnCompanyIDChanging(string value);
    partial void OnCompanyIDChanged();
    partial void OnCreateDateChanging(System.DateTime value);
    partial void OnCreateDateChanged();
    partial void OnSummaryChanging(string value);
    partial void OnSummaryChanged();
    #endregion
		
		public Contacts()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(150) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Mobile", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Mobile
		{
			get
			{
				return this._Mobile;
			}
			set
			{
				if ((this._Mobile != value))
				{
					this.OnMobileChanging(value);
					this.SendPropertyChanging();
					this._Mobile = value;
					this.SendPropertyChanged("Mobile");
					this.OnMobileChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Tel", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Tel
		{
			get
			{
				return this._Tel;
			}
			set
			{
				if ((this._Tel != value))
				{
					this.OnTelChanging(value);
					this.SendPropertyChanging();
					this._Tel = value;
					this.SendPropertyChanged("Tel");
					this.OnTelChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompanyID", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string CompanyID
		{
			get
			{
				return this._CompanyID;
			}
			set
			{
				if ((this._CompanyID != value))
				{
					this.OnCompanyIDChanging(value);
					this.SendPropertyChanging();
					this._CompanyID = value;
					this.SendPropertyChanged("CompanyID");
					this.OnCompanyIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreateDate", DbType="DateTime NOT NULL")]
		public System.DateTime CreateDate
		{
			get
			{
				return this._CreateDate;
			}
			set
			{
				if ((this._CreateDate != value))
				{
					this.OnCreateDateChanging(value);
					this.SendPropertyChanging();
					this._CreateDate = value;
					this.SendPropertyChanged("CreateDate");
					this.OnCreateDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Summary", DbType="NVarChar(300)")]
		public string Summary
		{
			get
			{
				return this._Summary;
			}
			set
			{
				if ((this._Summary != value))
				{
					this.OnSummaryChanging(value);
					this.SendPropertyChanging();
					this._Summary = value;
					this.SendPropertyChanged("Summary");
					this.OnSummaryChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.EntryNotices")]
	public partial class EntryNotices : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _ID;
		
		private string _InputID;
		
		private string _InApplyID;
		
		private string _WaybillID;
		
		private string _ProductID;
		
		private string _PackingIndex;
		
		private int _SortingRequire;
		
		private System.DateTime _CreateDate;
		
		private System.DateTime _UpdateDate;
		
		private int _Status;
		
		private string _Summary;
		
		private EntityRef<StandardProducts> _StandardProducts;
		
		private EntityRef<Waybills> _Waybills;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(string value);
    partial void OnIDChanged();
    partial void OnInputIDChanging(string value);
    partial void OnInputIDChanged();
    partial void OnInApplyIDChanging(string value);
    partial void OnInApplyIDChanged();
    partial void OnWaybillIDChanging(string value);
    partial void OnWaybillIDChanged();
    partial void OnProductIDChanging(string value);
    partial void OnProductIDChanged();
    partial void OnPackingIndexChanging(string value);
    partial void OnPackingIndexChanged();
    partial void OnSortingRequireChanging(int value);
    partial void OnSortingRequireChanged();
    partial void OnCreateDateChanging(System.DateTime value);
    partial void OnCreateDateChanged();
    partial void OnUpdateDateChanging(System.DateTime value);
    partial void OnUpdateDateChanged();
    partial void OnStatusChanging(int value);
    partial void OnStatusChanged();
    partial void OnSummaryChanging(string value);
    partial void OnSummaryChanged();
    #endregion
		
		public EntryNotices()
		{
			this._StandardProducts = default(EntityRef<StandardProducts>);
			this._Waybills = default(EntityRef<Waybills>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InputID", DbType="VarChar(50)")]
		public string InputID
		{
			get
			{
				return this._InputID;
			}
			set
			{
				if ((this._InputID != value))
				{
					this.OnInputIDChanging(value);
					this.SendPropertyChanging();
					this._InputID = value;
					this.SendPropertyChanged("InputID");
					this.OnInputIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InApplyID", DbType="VarChar(50)")]
		public string InApplyID
		{
			get
			{
				return this._InApplyID;
			}
			set
			{
				if ((this._InApplyID != value))
				{
					this.OnInApplyIDChanging(value);
					this.SendPropertyChanging();
					this._InApplyID = value;
					this.SendPropertyChanged("InApplyID");
					this.OnInApplyIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WaybillID", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string WaybillID
		{
			get
			{
				return this._WaybillID;
			}
			set
			{
				if ((this._WaybillID != value))
				{
					if (this._Waybills.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnWaybillIDChanging(value);
					this.SendPropertyChanging();
					this._WaybillID = value;
					this.SendPropertyChanged("WaybillID");
					this.OnWaybillIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductID", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string ProductID
		{
			get
			{
				return this._ProductID;
			}
			set
			{
				if ((this._ProductID != value))
				{
					if (this._StandardProducts.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProductIDChanging(value);
					this.SendPropertyChanging();
					this._ProductID = value;
					this.SendPropertyChanged("ProductID");
					this.OnProductIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PackingIndex", DbType="VarChar(50)")]
		public string PackingIndex
		{
			get
			{
				return this._PackingIndex;
			}
			set
			{
				if ((this._PackingIndex != value))
				{
					this.OnPackingIndexChanging(value);
					this.SendPropertyChanging();
					this._PackingIndex = value;
					this.SendPropertyChanged("PackingIndex");
					this.OnPackingIndexChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SortingRequire", DbType="Int NOT NULL")]
		public int SortingRequire
		{
			get
			{
				return this._SortingRequire;
			}
			set
			{
				if ((this._SortingRequire != value))
				{
					this.OnSortingRequireChanging(value);
					this.SendPropertyChanging();
					this._SortingRequire = value;
					this.SendPropertyChanged("SortingRequire");
					this.OnSortingRequireChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreateDate", DbType="DateTime NOT NULL")]
		public System.DateTime CreateDate
		{
			get
			{
				return this._CreateDate;
			}
			set
			{
				if ((this._CreateDate != value))
				{
					this.OnCreateDateChanging(value);
					this.SendPropertyChanging();
					this._CreateDate = value;
					this.SendPropertyChanged("CreateDate");
					this.OnCreateDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UpdateDate", DbType="DateTime NOT NULL")]
		public System.DateTime UpdateDate
		{
			get
			{
				return this._UpdateDate;
			}
			set
			{
				if ((this._UpdateDate != value))
				{
					this.OnUpdateDateChanging(value);
					this.SendPropertyChanging();
					this._UpdateDate = value;
					this.SendPropertyChanged("UpdateDate");
					this.OnUpdateDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="Int NOT NULL")]
		public int Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Summary", DbType="NVarChar(100)")]
		public string Summary
		{
			get
			{
				return this._Summary;
			}
			set
			{
				if ((this._Summary != value))
				{
					this.OnSummaryChanging(value);
					this.SendPropertyChanging();
					this._Summary = value;
					this.SendPropertyChanged("Summary");
					this.OnSummaryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="StandardProducts_EntryNotices", Storage="_StandardProducts", ThisKey="ProductID", OtherKey="ID", IsForeignKey=true)]
		public StandardProducts StandardProducts
		{
			get
			{
				return this._StandardProducts.Entity;
			}
			set
			{
				StandardProducts previousValue = this._StandardProducts.Entity;
				if (((previousValue != value) 
							|| (this._StandardProducts.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._StandardProducts.Entity = null;
						previousValue.EntryNotices.Remove(this);
					}
					this._StandardProducts.Entity = value;
					if ((value != null))
					{
						value.EntryNotices.Add(this);
						this._ProductID = value.ID;
					}
					else
					{
						this._ProductID = default(string);
					}
					this.SendPropertyChanged("StandardProducts");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Waybills_EntryNotices", Storage="_Waybills", ThisKey="WaybillID", OtherKey="ID", IsForeignKey=true)]
		public Waybills Waybills
		{
			get
			{
				return this._Waybills.Entity;
			}
			set
			{
				Waybills previousValue = this._Waybills.Entity;
				if (((previousValue != value) 
							|| (this._Waybills.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Waybills.Entity = null;
						previousValue.EntryNotices.Remove(this);
					}
					this._Waybills.Entity = value;
					if ((value != null))
					{
						value.EntryNotices.Add(this);
						this._WaybillID = value.ID;
					}
					else
					{
						this._WaybillID = default(string);
					}
					this.SendPropertyChanged("Waybills");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ExitFiles")]
	public partial class ExitFiles : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _ID;
		
		private string _ExitNoticeID;
		
		private string _OrderID;
		
		private string _Name;
		
		private int _Type;
		
		private string _URL;
		
		private string _AdminID;
		
		private System.DateTime _CreateDate;
		
		private string _Summary;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(string value);
    partial void OnIDChanged();
    partial void OnExitNoticeIDChanging(string value);
    partial void OnExitNoticeIDChanged();
    partial void OnOrderIDChanging(string value);
    partial void OnOrderIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnTypeChanging(int value);
    partial void OnTypeChanged();
    partial void OnURLChanging(string value);
    partial void OnURLChanged();
    partial void OnAdminIDChanging(string value);
    partial void OnAdminIDChanged();
    partial void OnCreateDateChanging(System.DateTime value);
    partial void OnCreateDateChanged();
    partial void OnSummaryChanging(string value);
    partial void OnSummaryChanged();
    #endregion
		
		public ExitFiles()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExitNoticeID", DbType="VarChar(50)")]
		public string ExitNoticeID
		{
			get
			{
				return this._ExitNoticeID;
			}
			set
			{
				if ((this._ExitNoticeID != value))
				{
					this.OnExitNoticeIDChanging(value);
					this.SendPropertyChanging();
					this._ExitNoticeID = value;
					this.SendPropertyChanged("ExitNoticeID");
					this.OnExitNoticeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrderID", DbType="VarChar(50)")]
		public string OrderID
		{
			get
			{
				return this._OrderID;
			}
			set
			{
				if ((this._OrderID != value))
				{
					this.OnOrderIDChanging(value);
					this.SendPropertyChanging();
					this._OrderID = value;
					this.SendPropertyChanged("OrderID");
					this.OnOrderIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(150) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type", DbType="Int NOT NULL")]
		public int Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_URL", DbType="VarChar(200) NOT NULL", CanBeNull=false)]
		public string URL
		{
			get
			{
				return this._URL;
			}
			set
			{
				if ((this._URL != value))
				{
					this.OnURLChanging(value);
					this.SendPropertyChanging();
					this._URL = value;
					this.SendPropertyChanged("URL");
					this.OnURLChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AdminID", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string AdminID
		{
			get
			{
				return this._AdminID;
			}
			set
			{
				if ((this._AdminID != value))
				{
					this.OnAdminIDChanging(value);
					this.SendPropertyChanging();
					this._AdminID = value;
					this.SendPropertyChanged("AdminID");
					this.OnAdminIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreateDate", DbType="DateTime NOT NULL")]
		public System.DateTime CreateDate
		{
			get
			{
				return this._CreateDate;
			}
			set
			{
				if ((this._CreateDate != value))
				{
					this.OnCreateDateChanging(value);
					this.SendPropertyChanging();
					this._CreateDate = value;
					this.SendPropertyChanged("CreateDate");
					this.OnCreateDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Summary", DbType="NVarChar(300)")]
		public string Summary
		{
			get
			{
				return this._Summary;
			}
			set
			{
				if ((this._Summary != value))
				{
					this.OnSummaryChanging(value);
					this.SendPropertyChanging();
					this._Summary = value;
					this.SendPropertyChanged("Summary");
					this.OnSummaryChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ExitNotices")]
	public partial class ExitNotices : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _ID;
		
		private string _OutputID;
		
		private string _OutApplyID;
		
		private string _WaybillID;
		
		private string _ProductID;
		
		private System.DateTime _CreateDate;
		
		private System.DateTime _UpdateDate;
		
		private int _Status;
		
		private string _Summary;
		
		private EntitySet<FlowStorages> _FlowStorages;
		
		private EntityRef<OutApplies> _OutApplies;
		
		private EntityRef<Outputs> _Outputs;
		
		private EntityRef<Waybills> _Waybills;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(string value);
    partial void OnIDChanged();
    partial void OnOutputIDChanging(string value);
    partial void OnOutputIDChanged();
    partial void OnOutApplyIDChanging(string value);
    partial void OnOutApplyIDChanged();
    partial void OnWaybillIDChanging(string value);
    partial void OnWaybillIDChanged();
    partial void OnProductIDChanging(string value);
    partial void OnProductIDChanged();
    partial void OnCreateDateChanging(System.DateTime value);
    partial void OnCreateDateChanged();
    partial void OnUpdateDateChanging(System.DateTime value);
    partial void OnUpdateDateChanged();
    partial void OnStatusChanging(int value);
    partial void OnStatusChanged();
    partial void OnSummaryChanging(string value);
    partial void OnSummaryChanged();
    #endregion
		
		public ExitNotices()
		{
			this._FlowStorages = new EntitySet<FlowStorages>(new Action<FlowStorages>(this.attach_FlowStorages), new Action<FlowStorages>(this.detach_FlowStorages));
			this._OutApplies = default(EntityRef<OutApplies>);
			this._Outputs = default(EntityRef<Outputs>);
			this._Waybills = default(EntityRef<Waybills>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OutputID", DbType="VarChar(50)")]
		public string OutputID
		{
			get
			{
				return this._OutputID;
			}
			set
			{
				if ((this._OutputID != value))
				{
					if (this._Outputs.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOutputIDChanging(value);
					this.SendPropertyChanging();
					this._OutputID = value;
					this.SendPropertyChanged("OutputID");
					this.OnOutputIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OutApplyID", DbType="VarChar(50)")]
		public string OutApplyID
		{
			get
			{
				return this._OutApplyID;
			}
			set
			{
				if ((this._OutApplyID != value))
				{
					if (this._OutApplies.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOutApplyIDChanging(value);
					this.SendPropertyChanging();
					this._OutApplyID = value;
					this.SendPropertyChanged("OutApplyID");
					this.OnOutApplyIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WaybillID", DbType="VarChar(50)")]
		public string WaybillID
		{
			get
			{
				return this._WaybillID;
			}
			set
			{
				if ((this._WaybillID != value))
				{
					if (this._Waybills.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnWaybillIDChanging(value);
					this.SendPropertyChanging();
					this._WaybillID = value;
					this.SendPropertyChanged("WaybillID");
					this.OnWaybillIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductID", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string ProductID
		{
			get
			{
				return this._ProductID;
			}
			set
			{
				if ((this._ProductID != value))
				{
					this.OnProductIDChanging(value);
					this.SendPropertyChanging();
					this._ProductID = value;
					this.SendPropertyChanged("ProductID");
					this.OnProductIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreateDate", DbType="DateTime NOT NULL")]
		public System.DateTime CreateDate
		{
			get
			{
				return this._CreateDate;
			}
			set
			{
				if ((this._CreateDate != value))
				{
					this.OnCreateDateChanging(value);
					this.SendPropertyChanging();
					this._CreateDate = value;
					this.SendPropertyChanged("CreateDate");
					this.OnCreateDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UpdateDate", DbType="DateTime NOT NULL")]
		public System.DateTime UpdateDate
		{
			get
			{
				return this._UpdateDate;
			}
			set
			{
				if ((this._UpdateDate != value))
				{
					this.OnUpdateDateChanging(value);
					this.SendPropertyChanging();
					this._UpdateDate = value;
					this.SendPropertyChanged("UpdateDate");
					this.OnUpdateDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="Int NOT NULL")]
		public int Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Summary", DbType="NVarChar(100)")]
		public string Summary
		{
			get
			{
				return this._Summary;
			}
			set
			{
				if ((this._Summary != value))
				{
					this.OnSummaryChanging(value);
					this.SendPropertyChanging();
					this._Summary = value;
					this.SendPropertyChanged("Summary");
					this.OnSummaryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ExitNotices_FlowStorages", Storage="_FlowStorages", ThisKey="ID", OtherKey="ExitNoticeID")]
		public EntitySet<FlowStorages> FlowStorages
		{
			get
			{
				return this._FlowStorages;
			}
			set
			{
				this._FlowStorages.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="OutApplies_ExitNotices", Storage="_OutApplies", ThisKey="OutApplyID", OtherKey="ID", IsForeignKey=true)]
		public OutApplies OutApplies
		{
			get
			{
				return this._OutApplies.Entity;
			}
			set
			{
				OutApplies previousValue = this._OutApplies.Entity;
				if (((previousValue != value) 
							|| (this._OutApplies.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._OutApplies.Entity = null;
						previousValue.ExitNotices.Remove(this);
					}
					this._OutApplies.Entity = value;
					if ((value != null))
					{
						value.ExitNotices.Add(this);
						this._OutApplyID = value.ID;
					}
					else
					{
						this._OutApplyID = default(string);
					}
					this.SendPropertyChanged("OutApplies");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Outputs_ExitNotices", Storage="_Outputs", ThisKey="OutputID", OtherKey="ID", IsForeignKey=true)]
		public Outputs Outputs
		{
			get
			{
				return this._Outputs.Entity;
			}
			set
			{
				Outputs previousValue = this._Outputs.Entity;
				if (((previousValue != value) 
							|| (this._Outputs.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Outputs.Entity = null;
						previousValue.ExitNotices.Remove(this);
					}
					this._Outputs.Entity = value;
					if ((value != null))
					{
						value.ExitNotices.Add(this);
						this._OutputID = value.ID;
					}
					else
					{
						this._OutputID = default(string);
					}
					this.SendPropertyChanged("Outputs");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Waybills_ExitNotices", Storage="_Waybills", ThisKey="WaybillID", OtherKey="ID", IsForeignKey=true)]
		public Waybills Waybills
		{
			get
			{
				return this._Waybills.Entity;
			}
			set
			{
				Waybills previousValue = this._Waybills.Entity;
				if (((previousValue != value) 
							|| (this._Waybills.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Waybills.Entity = null;
						previousValue.ExitNotices.Remove(this);
					}
					this._Waybills.Entity = value;
					if ((value != null))
					{
						value.ExitNotices.Add(this);
						this._WaybillID = value.ID;
					}
					else
					{
						this._WaybillID = default(string);
					}
					this.SendPropertyChanged("Waybills");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_FlowStorages(FlowStorages entity)
		{
			this.SendPropertyChanging();
			entity.ExitNotices = this;
		}
		
		private void detach_FlowStorages(FlowStorages entity)
		{
			this.SendPropertyChanging();
			entity.ExitNotices = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Expenses")]
	public partial class Expenses : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _ID;
		
		private string _Type;
		
		private string _InputID;
		
		private string _InApplyID;
		
		private string _WaybilID;
		
		private string _SortingID;
		
		private string _PickingID;
		
		private string _Currency;
		
		private string _Price;
		
		private string _Currency1;
		
		private string _Price1;
		
		private System.DateTime _CreateDate;
		
		private EntityRef<InApplies> _InApplies;
		
		private EntityRef<Inputs> _Inputs;
		
		private EntityRef<Pickings> _Pickings;
		
		private EntityRef<Sortings> _Sortings;
		
		private EntityRef<Waybills> _Waybills;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(string value);
    partial void OnIDChanged();
    partial void OnTypeChanging(string value);
    partial void OnTypeChanged();
    partial void OnInputIDChanging(string value);
    partial void OnInputIDChanged();
    partial void OnInApplyIDChanging(string value);
    partial void OnInApplyIDChanged();
    partial void OnWaybilIDChanging(string value);
    partial void OnWaybilIDChanged();
    partial void OnSortingIDChanging(string value);
    partial void OnSortingIDChanged();
    partial void OnPickingIDChanging(string value);
    partial void OnPickingIDChanged();
    partial void OnCurrencyChanging(string value);
    partial void OnCurrencyChanged();
    partial void OnPriceChanging(string value);
    partial void OnPriceChanged();
    partial void OnCurrency1Changing(string value);
    partial void OnCurrency1Changed();
    partial void OnPrice1Changing(string value);
    partial void OnPrice1Changed();
    partial void OnCreateDateChanging(System.DateTime value);
    partial void OnCreateDateChanged();
    #endregion
		
		public Expenses()
		{
			this._InApplies = default(EntityRef<InApplies>);
			this._Inputs = default(EntityRef<Inputs>);
			this._Pickings = default(EntityRef<Pickings>);
			this._Sortings = default(EntityRef<Sortings>);
			this._Waybills = default(EntityRef<Waybills>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type", DbType="NChar(10) NOT NULL", CanBeNull=false)]
		public string Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InputID", DbType="VarChar(50)")]
		public string InputID
		{
			get
			{
				return this._InputID;
			}
			set
			{
				if ((this._InputID != value))
				{
					if (this._Inputs.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnInputIDChanging(value);
					this.SendPropertyChanging();
					this._InputID = value;
					this.SendPropertyChanged("InputID");
					this.OnInputIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InApplyID", DbType="VarChar(50)")]
		public string InApplyID
		{
			get
			{
				return this._InApplyID;
			}
			set
			{
				if ((this._InApplyID != value))
				{
					if (this._InApplies.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnInApplyIDChanging(value);
					this.SendPropertyChanging();
					this._InApplyID = value;
					this.SendPropertyChanged("InApplyID");
					this.OnInApplyIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WaybilID", DbType="VarChar(50)")]
		public string WaybilID
		{
			get
			{
				return this._WaybilID;
			}
			set
			{
				if ((this._WaybilID != value))
				{
					if (this._Waybills.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnWaybilIDChanging(value);
					this.SendPropertyChanging();
					this._WaybilID = value;
					this.SendPropertyChanged("WaybilID");
					this.OnWaybilIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SortingID", DbType="VarChar(50)")]
		public string SortingID
		{
			get
			{
				return this._SortingID;
			}
			set
			{
				if ((this._SortingID != value))
				{
					if (this._Sortings.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSortingIDChanging(value);
					this.SendPropertyChanging();
					this._SortingID = value;
					this.SendPropertyChanged("SortingID");
					this.OnSortingIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PickingID", DbType="VarChar(50)")]
		public string PickingID
		{
			get
			{
				return this._PickingID;
			}
			set
			{
				if ((this._PickingID != value))
				{
					if (this._Pickings.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPickingIDChanging(value);
					this.SendPropertyChanging();
					this._PickingID = value;
					this.SendPropertyChanged("PickingID");
					this.OnPickingIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Currency", DbType="NChar(10) NOT NULL", CanBeNull=false)]
		public string Currency
		{
			get
			{
				return this._Currency;
			}
			set
			{
				if ((this._Currency != value))
				{
					this.OnCurrencyChanging(value);
					this.SendPropertyChanging();
					this._Currency = value;
					this.SendPropertyChanged("Currency");
					this.OnCurrencyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Price", DbType="NChar(10) NOT NULL", CanBeNull=false)]
		public string Price
		{
			get
			{
				return this._Price;
			}
			set
			{
				if ((this._Price != value))
				{
					this.OnPriceChanging(value);
					this.SendPropertyChanging();
					this._Price = value;
					this.SendPropertyChanged("Price");
					this.OnPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Currency1", DbType="NChar(10) NOT NULL", CanBeNull=false)]
		public string Currency1
		{
			get
			{
				return this._Currency1;
			}
			set
			{
				if ((this._Currency1 != value))
				{
					this.OnCurrency1Changing(value);
					this.SendPropertyChanging();
					this._Currency1 = value;
					this.SendPropertyChanged("Currency1");
					this.OnCurrency1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Price1", DbType="NChar(10) NOT NULL", CanBeNull=false)]
		public string Price1
		{
			get
			{
				return this._Price1;
			}
			set
			{
				if ((this._Price1 != value))
				{
					this.OnPrice1Changing(value);
					this.SendPropertyChanging();
					this._Price1 = value;
					this.SendPropertyChanged("Price1");
					this.OnPrice1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreateDate", DbType="DateTime NOT NULL")]
		public System.DateTime CreateDate
		{
			get
			{
				return this._CreateDate;
			}
			set
			{
				if ((this._CreateDate != value))
				{
					this.OnCreateDateChanging(value);
					this.SendPropertyChanging();
					this._CreateDate = value;
					this.SendPropertyChanged("CreateDate");
					this.OnCreateDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="InApplies_Expenses", Storage="_InApplies", ThisKey="InApplyID", OtherKey="ID", IsForeignKey=true)]
		public InApplies InApplies
		{
			get
			{
				return this._InApplies.Entity;
			}
			set
			{
				InApplies previousValue = this._InApplies.Entity;
				if (((previousValue != value) 
							|| (this._InApplies.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._InApplies.Entity = null;
						previousValue.Expenses.Remove(this);
					}
					this._InApplies.Entity = value;
					if ((value != null))
					{
						value.Expenses.Add(this);
						this._InApplyID = value.ID;
					}
					else
					{
						this._InApplyID = default(string);
					}
					this.SendPropertyChanged("InApplies");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Inputs_Expenses", Storage="_Inputs", ThisKey="InputID", OtherKey="ID", IsForeignKey=true)]
		public Inputs Inputs
		{
			get
			{
				return this._Inputs.Entity;
			}
			set
			{
				Inputs previousValue = this._Inputs.Entity;
				if (((previousValue != value) 
							|| (this._Inputs.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Inputs.Entity = null;
						previousValue.Expenses.Remove(this);
					}
					this._Inputs.Entity = value;
					if ((value != null))
					{
						value.Expenses.Add(this);
						this._InputID = value.ID;
					}
					else
					{
						this._InputID = default(string);
					}
					this.SendPropertyChanged("Inputs");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Pickings_Expenses", Storage="_Pickings", ThisKey="PickingID", OtherKey="ID", IsForeignKey=true)]
		public Pickings Pickings
		{
			get
			{
				return this._Pickings.Entity;
			}
			set
			{
				Pickings previousValue = this._Pickings.Entity;
				if (((previousValue != value) 
							|| (this._Pickings.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Pickings.Entity = null;
						previousValue.Expenses.Remove(this);
					}
					this._Pickings.Entity = value;
					if ((value != null))
					{
						value.Expenses.Add(this);
						this._PickingID = value.ID;
					}
					else
					{
						this._PickingID = default(string);
					}
					this.SendPropertyChanged("Pickings");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Sortings_Expenses", Storage="_Sortings", ThisKey="SortingID", OtherKey="ID", IsForeignKey=true)]
		public Sortings Sortings
		{
			get
			{
				return this._Sortings.Entity;
			}
			set
			{
				Sortings previousValue = this._Sortings.Entity;
				if (((previousValue != value) 
							|| (this._Sortings.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Sortings.Entity = null;
						previousValue.Expenses.Remove(this);
					}
					this._Sortings.Entity = value;
					if ((value != null))
					{
						value.Expenses.Add(this);
						this._SortingID = value.ID;
					}
					else
					{
						this._SortingID = default(string);
					}
					this.SendPropertyChanged("Sortings");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Waybills_Expenses", Storage="_Waybills", ThisKey="WaybilID", OtherKey="ID", IsForeignKey=true)]
		public Waybills Waybills
		{
			get
			{
				return this._Waybills.Entity;
			}
			set
			{
				Waybills previousValue = this._Waybills.Entity;
				if (((previousValue != value) 
							|| (this._Waybills.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Waybills.Entity = null;
						previousValue.Expenses.Remove(this);
					}
					this._Waybills.Entity = value;
					if ((value != null))
					{
						value.Expenses.Add(this);
						this._WaybilID = value.ID;
					}
					else
					{
						this._WaybilID = default(string);
					}
					this.SendPropertyChanged("Waybills");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.FlowStorages")]
	public partial class FlowStorages : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _ID;
		
		private string _EntryNoticeID;
		
		private string _ExitNoticeID;
		
		private string _SortingID;
		
		private string _PickingID;
		
		private string _InputID;
		
		private string _InApplyID;
		
		private string _ProductID;
		
		private string _ShelveID;
		
		private System.Nullable<decimal> _Weigth;
		
		private int _Status;
		
		private System.DateTime _CreateDate;
		
		private System.DateTime _UpdateDate;
		
		private EntityRef<FlowStorages> _FlowStorages2;
		
		private EntitySet<Forms> _Forms;
		
		private EntitySet<Pickings> _Pickings;
		
		private EntityRef<ExitNotices> _ExitNotices;
		
		private EntityRef<FlowStorages> _FlowStorages1;
		
		private EntityRef<Shelves> _Shelves;
		
		private EntityRef<Sortings> _Sortings;
		
		private EntityRef<StandardProducts> _StandardProducts;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(string value);
    partial void OnIDChanged();
    partial void OnEntryNoticeIDChanging(string value);
    partial void OnEntryNoticeIDChanged();
    partial void OnExitNoticeIDChanging(string value);
    partial void OnExitNoticeIDChanged();
    partial void OnSortingIDChanging(string value);
    partial void OnSortingIDChanged();
    partial void OnPickingIDChanging(string value);
    partial void OnPickingIDChanged();
    partial void OnInputIDChanging(string value);
    partial void OnInputIDChanged();
    partial void OnInApplyIDChanging(string value);
    partial void OnInApplyIDChanged();
    partial void OnProductIDChanging(string value);
    partial void OnProductIDChanged();
    partial void OnShelveIDChanging(string value);
    partial void OnShelveIDChanged();
    partial void OnWeigthChanging(System.Nullable<decimal> value);
    partial void OnWeigthChanged();
    partial void OnStatusChanging(int value);
    partial void OnStatusChanged();
    partial void OnCreateDateChanging(System.DateTime value);
    partial void OnCreateDateChanged();
    partial void OnUpdateDateChanging(System.DateTime value);
    partial void OnUpdateDateChanged();
    #endregion
		
		public FlowStorages()
		{
			this._FlowStorages2 = default(EntityRef<FlowStorages>);
			this._Forms = new EntitySet<Forms>(new Action<Forms>(this.attach_Forms), new Action<Forms>(this.detach_Forms));
			this._Pickings = new EntitySet<Pickings>(new Action<Pickings>(this.attach_Pickings), new Action<Pickings>(this.detach_Pickings));
			this._ExitNotices = default(EntityRef<ExitNotices>);
			this._FlowStorages1 = default(EntityRef<FlowStorages>);
			this._Shelves = default(EntityRef<Shelves>);
			this._Sortings = default(EntityRef<Sortings>);
			this._StandardProducts = default(EntityRef<StandardProducts>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					if (this._FlowStorages1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EntryNoticeID", DbType="VarChar(50)")]
		public string EntryNoticeID
		{
			get
			{
				return this._EntryNoticeID;
			}
			set
			{
				if ((this._EntryNoticeID != value))
				{
					this.OnEntryNoticeIDChanging(value);
					this.SendPropertyChanging();
					this._EntryNoticeID = value;
					this.SendPropertyChanged("EntryNoticeID");
					this.OnEntryNoticeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExitNoticeID", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string ExitNoticeID
		{
			get
			{
				return this._ExitNoticeID;
			}
			set
			{
				if ((this._ExitNoticeID != value))
				{
					if (this._ExitNotices.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnExitNoticeIDChanging(value);
					this.SendPropertyChanging();
					this._ExitNoticeID = value;
					this.SendPropertyChanged("ExitNoticeID");
					this.OnExitNoticeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SortingID", DbType="VarChar(50)")]
		public string SortingID
		{
			get
			{
				return this._SortingID;
			}
			set
			{
				if ((this._SortingID != value))
				{
					if (this._Sortings.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSortingIDChanging(value);
					this.SendPropertyChanging();
					this._SortingID = value;
					this.SendPropertyChanged("SortingID");
					this.OnSortingIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PickingID", DbType="VarChar(50)")]
		public string PickingID
		{
			get
			{
				return this._PickingID;
			}
			set
			{
				if ((this._PickingID != value))
				{
					this.OnPickingIDChanging(value);
					this.SendPropertyChanging();
					this._PickingID = value;
					this.SendPropertyChanged("PickingID");
					this.OnPickingIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InputID", DbType="VarChar(50)")]
		public string InputID
		{
			get
			{
				return this._InputID;
			}
			set
			{
				if ((this._InputID != value))
				{
					this.OnInputIDChanging(value);
					this.SendPropertyChanging();
					this._InputID = value;
					this.SendPropertyChanged("InputID");
					this.OnInputIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InApplyID", DbType="VarChar(50)")]
		public string InApplyID
		{
			get
			{
				return this._InApplyID;
			}
			set
			{
				if ((this._InApplyID != value))
				{
					this.OnInApplyIDChanging(value);
					this.SendPropertyChanging();
					this._InApplyID = value;
					this.SendPropertyChanged("InApplyID");
					this.OnInApplyIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductID", DbType="VarChar(50)")]
		public string ProductID
		{
			get
			{
				return this._ProductID;
			}
			set
			{
				if ((this._ProductID != value))
				{
					if (this._StandardProducts.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProductIDChanging(value);
					this.SendPropertyChanging();
					this._ProductID = value;
					this.SendPropertyChanged("ProductID");
					this.OnProductIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ShelveID", DbType="VarChar(50)")]
		public string ShelveID
		{
			get
			{
				return this._ShelveID;
			}
			set
			{
				if ((this._ShelveID != value))
				{
					if (this._Shelves.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnShelveIDChanging(value);
					this.SendPropertyChanging();
					this._ShelveID = value;
					this.SendPropertyChanged("ShelveID");
					this.OnShelveIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Weigth", DbType="Decimal(18,5)")]
		public System.Nullable<decimal> Weigth
		{
			get
			{
				return this._Weigth;
			}
			set
			{
				if ((this._Weigth != value))
				{
					this.OnWeigthChanging(value);
					this.SendPropertyChanging();
					this._Weigth = value;
					this.SendPropertyChanged("Weigth");
					this.OnWeigthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="Int NOT NULL")]
		public int Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreateDate", DbType="DateTime NOT NULL")]
		public System.DateTime CreateDate
		{
			get
			{
				return this._CreateDate;
			}
			set
			{
				if ((this._CreateDate != value))
				{
					this.OnCreateDateChanging(value);
					this.SendPropertyChanging();
					this._CreateDate = value;
					this.SendPropertyChanged("CreateDate");
					this.OnCreateDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UpdateDate", DbType="DateTime NOT NULL")]
		public System.DateTime UpdateDate
		{
			get
			{
				return this._UpdateDate;
			}
			set
			{
				if ((this._UpdateDate != value))
				{
					this.OnUpdateDateChanging(value);
					this.SendPropertyChanging();
					this._UpdateDate = value;
					this.SendPropertyChanged("UpdateDate");
					this.OnUpdateDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FlowStorages_FlowStorages", Storage="_FlowStorages2", ThisKey="ID", OtherKey="ID", IsUnique=true, IsForeignKey=false)]
		public FlowStorages FlowStorages2
		{
			get
			{
				return this._FlowStorages2.Entity;
			}
			set
			{
				FlowStorages previousValue = this._FlowStorages2.Entity;
				if (((previousValue != value) 
							|| (this._FlowStorages2.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._FlowStorages2.Entity = null;
						previousValue.FlowStorages1 = null;
					}
					this._FlowStorages2.Entity = value;
					if ((value != null))
					{
						value.FlowStorages1 = this;
					}
					this.SendPropertyChanged("FlowStorages2");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FlowStorages_Forms", Storage="_Forms", ThisKey="ID", OtherKey="FlowID")]
		public EntitySet<Forms> Forms
		{
			get
			{
				return this._Forms;
			}
			set
			{
				this._Forms.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FlowStorages_Pickings", Storage="_Pickings", ThisKey="ID", OtherKey="FlowStorageID")]
		public EntitySet<Pickings> Pickings
		{
			get
			{
				return this._Pickings;
			}
			set
			{
				this._Pickings.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ExitNotices_FlowStorages", Storage="_ExitNotices", ThisKey="ExitNoticeID", OtherKey="ID", IsForeignKey=true)]
		public ExitNotices ExitNotices
		{
			get
			{
				return this._ExitNotices.Entity;
			}
			set
			{
				ExitNotices previousValue = this._ExitNotices.Entity;
				if (((previousValue != value) 
							|| (this._ExitNotices.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ExitNotices.Entity = null;
						previousValue.FlowStorages.Remove(this);
					}
					this._ExitNotices.Entity = value;
					if ((value != null))
					{
						value.FlowStorages.Add(this);
						this._ExitNoticeID = value.ID;
					}
					else
					{
						this._ExitNoticeID = default(string);
					}
					this.SendPropertyChanged("ExitNotices");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FlowStorages_FlowStorages", Storage="_FlowStorages1", ThisKey="ID", OtherKey="ID", IsForeignKey=true)]
		public FlowStorages FlowStorages1
		{
			get
			{
				return this._FlowStorages1.Entity;
			}
			set
			{
				FlowStorages previousValue = this._FlowStorages1.Entity;
				if (((previousValue != value) 
							|| (this._FlowStorages1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._FlowStorages1.Entity = null;
						previousValue.FlowStorages2 = null;
					}
					this._FlowStorages1.Entity = value;
					if ((value != null))
					{
						value.FlowStorages2 = this;
						this._ID = value.ID;
					}
					else
					{
						this._ID = default(string);
					}
					this.SendPropertyChanged("FlowStorages1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Shelves_FlowStorages", Storage="_Shelves", ThisKey="ShelveID", OtherKey="ID", IsForeignKey=true)]
		public Shelves Shelves
		{
			get
			{
				return this._Shelves.Entity;
			}
			set
			{
				Shelves previousValue = this._Shelves.Entity;
				if (((previousValue != value) 
							|| (this._Shelves.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Shelves.Entity = null;
						previousValue.FlowStorages.Remove(this);
					}
					this._Shelves.Entity = value;
					if ((value != null))
					{
						value.FlowStorages.Add(this);
						this._ShelveID = value.ID;
					}
					else
					{
						this._ShelveID = default(string);
					}
					this.SendPropertyChanged("Shelves");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Sortings_FlowStorages", Storage="_Sortings", ThisKey="SortingID", OtherKey="ID", IsForeignKey=true)]
		public Sortings Sortings
		{
			get
			{
				return this._Sortings.Entity;
			}
			set
			{
				Sortings previousValue = this._Sortings.Entity;
				if (((previousValue != value) 
							|| (this._Sortings.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Sortings.Entity = null;
						previousValue.FlowStorages.Remove(this);
					}
					this._Sortings.Entity = value;
					if ((value != null))
					{
						value.FlowStorages.Add(this);
						this._SortingID = value.ID;
					}
					else
					{
						this._SortingID = default(string);
					}
					this.SendPropertyChanged("Sortings");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="StandardProducts_FlowStorages", Storage="_StandardProducts", ThisKey="ProductID", OtherKey="ID", IsForeignKey=true)]
		public StandardProducts StandardProducts
		{
			get
			{
				return this._StandardProducts.Entity;
			}
			set
			{
				StandardProducts previousValue = this._StandardProducts.Entity;
				if (((previousValue != value) 
							|| (this._StandardProducts.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._StandardProducts.Entity = null;
						previousValue.FlowStorages.Remove(this);
					}
					this._StandardProducts.Entity = value;
					if ((value != null))
					{
						value.FlowStorages.Add(this);
						this._ProductID = value.ID;
					}
					else
					{
						this._ProductID = default(string);
					}
					this.SendPropertyChanged("StandardProducts");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Forms(Forms entity)
		{
			this.SendPropertyChanging();
			entity.FlowStorages = this;
		}
		
		private void detach_Forms(Forms entity)
		{
			this.SendPropertyChanging();
			entity.FlowStorages = null;
		}
		
		private void attach_Pickings(Pickings entity)
		{
			this.SendPropertyChanging();
			entity.FlowStorages = this;
		}
		
		private void detach_Pickings(Pickings entity)
		{
			this.SendPropertyChanging();
			entity.FlowStorages = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Forms")]
	public partial class Forms : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _ID;
		
		private string _PickingID;
		
		private string _FlowID;
		
		private string _StroeID;
		
		private string _RunID;
		
		private int _Quantity;
		
		private string _AdminID;
		
		private System.Nullable<System.DateTime> _CreateDate;
		
		private string _Output;
		
		private EntityRef<FlowStorages> _FlowStorages;
		
		private EntityRef<Pickings> _Pickings;
		
		private EntityRef<RunStorages> _RunStorages;
		
		private EntityRef<StroeStorages> _StroeStorages;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(string value);
    partial void OnIDChanged();
    partial void OnPickingIDChanging(string value);
    partial void OnPickingIDChanged();
    partial void OnFlowIDChanging(string value);
    partial void OnFlowIDChanged();
    partial void OnStroeIDChanging(string value);
    partial void OnStroeIDChanged();
    partial void OnRunIDChanging(string value);
    partial void OnRunIDChanged();
    partial void OnQuantityChanging(int value);
    partial void OnQuantityChanged();
    partial void OnAdminIDChanging(string value);
    partial void OnAdminIDChanged();
    partial void OnCreateDateChanging(System.Nullable<System.DateTime> value);
    partial void OnCreateDateChanged();
    partial void OnOutputChanging(string value);
    partial void OnOutputChanged();
    #endregion
		
		public Forms()
		{
			this._FlowStorages = default(EntityRef<FlowStorages>);
			this._Pickings = default(EntityRef<Pickings>);
			this._RunStorages = default(EntityRef<RunStorages>);
			this._StroeStorages = default(EntityRef<StroeStorages>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PickingID", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string PickingID
		{
			get
			{
				return this._PickingID;
			}
			set
			{
				if ((this._PickingID != value))
				{
					if (this._Pickings.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPickingIDChanging(value);
					this.SendPropertyChanging();
					this._PickingID = value;
					this.SendPropertyChanged("PickingID");
					this.OnPickingIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FlowID", DbType="VarChar(50)")]
		public string FlowID
		{
			get
			{
				return this._FlowID;
			}
			set
			{
				if ((this._FlowID != value))
				{
					if (this._FlowStorages.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFlowIDChanging(value);
					this.SendPropertyChanging();
					this._FlowID = value;
					this.SendPropertyChanged("FlowID");
					this.OnFlowIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StroeID", DbType="VarChar(50)")]
		public string StroeID
		{
			get
			{
				return this._StroeID;
			}
			set
			{
				if ((this._StroeID != value))
				{
					if (this._StroeStorages.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStroeIDChanging(value);
					this.SendPropertyChanging();
					this._StroeID = value;
					this.SendPropertyChanged("StroeID");
					this.OnStroeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RunID", DbType="VarChar(50)")]
		public string RunID
		{
			get
			{
				return this._RunID;
			}
			set
			{
				if ((this._RunID != value))
				{
					if (this._RunStorages.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRunIDChanging(value);
					this.SendPropertyChanging();
					this._RunID = value;
					this.SendPropertyChanged("RunID");
					this.OnRunIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Quantity", DbType="Int NOT NULL")]
		public int Quantity
		{
			get
			{
				return this._Quantity;
			}
			set
			{
				if ((this._Quantity != value))
				{
					this.OnQuantityChanging(value);
					this.SendPropertyChanging();
					this._Quantity = value;
					this.SendPropertyChanged("Quantity");
					this.OnQuantityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AdminID", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string AdminID
		{
			get
			{
				return this._AdminID;
			}
			set
			{
				if ((this._AdminID != value))
				{
					this.OnAdminIDChanging(value);
					this.SendPropertyChanging();
					this._AdminID = value;
					this.SendPropertyChanged("AdminID");
					this.OnAdminIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreateDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> CreateDate
		{
			get
			{
				return this._CreateDate;
			}
			set
			{
				if ((this._CreateDate != value))
				{
					this.OnCreateDateChanging(value);
					this.SendPropertyChanging();
					this._CreateDate = value;
					this.SendPropertyChanged("CreateDate");
					this.OnCreateDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Output", DbType="VarChar(50)")]
		public string Output
		{
			get
			{
				return this._Output;
			}
			set
			{
				if ((this._Output != value))
				{
					this.OnOutputChanging(value);
					this.SendPropertyChanging();
					this._Output = value;
					this.SendPropertyChanged("Output");
					this.OnOutputChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FlowStorages_Forms", Storage="_FlowStorages", ThisKey="FlowID", OtherKey="ID", IsForeignKey=true)]
		public FlowStorages FlowStorages
		{
			get
			{
				return this._FlowStorages.Entity;
			}
			set
			{
				FlowStorages previousValue = this._FlowStorages.Entity;
				if (((previousValue != value) 
							|| (this._FlowStorages.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._FlowStorages.Entity = null;
						previousValue.Forms.Remove(this);
					}
					this._FlowStorages.Entity = value;
					if ((value != null))
					{
						value.Forms.Add(this);
						this._FlowID = value.ID;
					}
					else
					{
						this._FlowID = default(string);
					}
					this.SendPropertyChanged("FlowStorages");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Pickings_Forms", Storage="_Pickings", ThisKey="PickingID", OtherKey="ID", IsForeignKey=true)]
		public Pickings Pickings
		{
			get
			{
				return this._Pickings.Entity;
			}
			set
			{
				Pickings previousValue = this._Pickings.Entity;
				if (((previousValue != value) 
							|| (this._Pickings.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Pickings.Entity = null;
						previousValue.Forms.Remove(this);
					}
					this._Pickings.Entity = value;
					if ((value != null))
					{
						value.Forms.Add(this);
						this._PickingID = value.ID;
					}
					else
					{
						this._PickingID = default(string);
					}
					this.SendPropertyChanged("Pickings");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RunStorages_Forms", Storage="_RunStorages", ThisKey="RunID", OtherKey="ID", IsForeignKey=true)]
		public RunStorages RunStorages
		{
			get
			{
				return this._RunStorages.Entity;
			}
			set
			{
				RunStorages previousValue = this._RunStorages.Entity;
				if (((previousValue != value) 
							|| (this._RunStorages.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._RunStorages.Entity = null;
						previousValue.Forms.Remove(this);
					}
					this._RunStorages.Entity = value;
					if ((value != null))
					{
						value.Forms.Add(this);
						this._RunID = value.ID;
					}
					else
					{
						this._RunID = default(string);
					}
					this.SendPropertyChanged("RunStorages");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="StroeStorages_Forms", Storage="_StroeStorages", ThisKey="StroeID", OtherKey="ID", IsForeignKey=true)]
		public StroeStorages StroeStorages
		{
			get
			{
				return this._StroeStorages.Entity;
			}
			set
			{
				StroeStorages previousValue = this._StroeStorages.Entity;
				if (((previousValue != value) 
							|| (this._StroeStorages.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._StroeStorages.Entity = null;
						previousValue.Forms.Remove(this);
					}
					this._StroeStorages.Entity = value;
					if ((value != null))
					{
						value.Forms.Add(this);
						this._StroeID = value.ID;
					}
					else
					{
						this._StroeID = default(string);
					}
					this.SendPropertyChanged("StroeStorages");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.InApplies")]
	public partial class InApplies : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _ID;
		
		private string _ApplyID;
		
		private string _ApplyItemID;
		
		private string _AdminID;
		
		private int _Quantity;
		
		private int _Currency;
		
		private decimal _UnitPrice;
		
		private string _ProductID;
		
		private System.DateTime _CreateDate;
		
		private EntitySet<Expenses> _Expenses;
		
		private EntitySet<OutApplies> _OutApplies;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(string value);
    partial void OnIDChanged();
    partial void OnApplyIDChanging(string value);
    partial void OnApplyIDChanged();
    partial void OnApplyItemIDChanging(string value);
    partial void OnApplyItemIDChanged();
    partial void OnAdminIDChanging(string value);
    partial void OnAdminIDChanged();
    partial void OnQuantityChanging(int value);
    partial void OnQuantityChanged();
    partial void OnCurrencyChanging(int value);
    partial void OnCurrencyChanged();
    partial void OnUnitPriceChanging(decimal value);
    partial void OnUnitPriceChanged();
    partial void OnProductIDChanging(string value);
    partial void OnProductIDChanged();
    partial void OnCreateDateChanging(System.DateTime value);
    partial void OnCreateDateChanged();
    #endregion
		
		public InApplies()
		{
			this._Expenses = new EntitySet<Expenses>(new Action<Expenses>(this.attach_Expenses), new Action<Expenses>(this.detach_Expenses));
			this._OutApplies = new EntitySet<OutApplies>(new Action<OutApplies>(this.attach_OutApplies), new Action<OutApplies>(this.detach_OutApplies));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ApplyID", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string ApplyID
		{
			get
			{
				return this._ApplyID;
			}
			set
			{
				if ((this._ApplyID != value))
				{
					this.OnApplyIDChanging(value);
					this.SendPropertyChanging();
					this._ApplyID = value;
					this.SendPropertyChanged("ApplyID");
					this.OnApplyIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ApplyItemID", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string ApplyItemID
		{
			get
			{
				return this._ApplyItemID;
			}
			set
			{
				if ((this._ApplyItemID != value))
				{
					this.OnApplyItemIDChanging(value);
					this.SendPropertyChanging();
					this._ApplyItemID = value;
					this.SendPropertyChanged("ApplyItemID");
					this.OnApplyItemIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AdminID", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string AdminID
		{
			get
			{
				return this._AdminID;
			}
			set
			{
				if ((this._AdminID != value))
				{
					this.OnAdminIDChanging(value);
					this.SendPropertyChanging();
					this._AdminID = value;
					this.SendPropertyChanged("AdminID");
					this.OnAdminIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Quantity", DbType="Int NOT NULL")]
		public int Quantity
		{
			get
			{
				return this._Quantity;
			}
			set
			{
				if ((this._Quantity != value))
				{
					this.OnQuantityChanging(value);
					this.SendPropertyChanging();
					this._Quantity = value;
					this.SendPropertyChanged("Quantity");
					this.OnQuantityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Currency", DbType="Int NOT NULL")]
		public int Currency
		{
			get
			{
				return this._Currency;
			}
			set
			{
				if ((this._Currency != value))
				{
					this.OnCurrencyChanging(value);
					this.SendPropertyChanging();
					this._Currency = value;
					this.SendPropertyChanged("Currency");
					this.OnCurrencyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UnitPrice", DbType="Decimal(18,5) NOT NULL")]
		public decimal UnitPrice
		{
			get
			{
				return this._UnitPrice;
			}
			set
			{
				if ((this._UnitPrice != value))
				{
					this.OnUnitPriceChanging(value);
					this.SendPropertyChanging();
					this._UnitPrice = value;
					this.SendPropertyChanged("UnitPrice");
					this.OnUnitPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductID", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string ProductID
		{
			get
			{
				return this._ProductID;
			}
			set
			{
				if ((this._ProductID != value))
				{
					this.OnProductIDChanging(value);
					this.SendPropertyChanging();
					this._ProductID = value;
					this.SendPropertyChanged("ProductID");
					this.OnProductIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreateDate", DbType="DateTime NOT NULL")]
		public System.DateTime CreateDate
		{
			get
			{
				return this._CreateDate;
			}
			set
			{
				if ((this._CreateDate != value))
				{
					this.OnCreateDateChanging(value);
					this.SendPropertyChanging();
					this._CreateDate = value;
					this.SendPropertyChanged("CreateDate");
					this.OnCreateDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="InApplies_Expenses", Storage="_Expenses", ThisKey="ID", OtherKey="InApplyID")]
		public EntitySet<Expenses> Expenses
		{
			get
			{
				return this._Expenses;
			}
			set
			{
				this._Expenses.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="InApplies_OutApplies", Storage="_OutApplies", ThisKey="ID", OtherKey="InApplyID")]
		public EntitySet<OutApplies> OutApplies
		{
			get
			{
				return this._OutApplies;
			}
			set
			{
				this._OutApplies.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Expenses(Expenses entity)
		{
			this.SendPropertyChanging();
			entity.InApplies = this;
		}
		
		private void detach_Expenses(Expenses entity)
		{
			this.SendPropertyChanging();
			entity.InApplies = null;
		}
		
		private void attach_OutApplies(OutApplies entity)
		{
			this.SendPropertyChanging();
			entity.InApplies = this;
		}
		
		private void detach_OutApplies(OutApplies entity)
		{
			this.SendPropertyChanging();
			entity.InApplies = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Inputs")]
	public partial class Inputs : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _ID;
		
		private string _OrderID;
		
		private string _OrderItemID;
		
		private string _AdminID;
		
		private int _Quantity;
		
		private int _Currency;
		
		private decimal _UnitPrice;
		
		private System.Nullable<int> _Currency1;
		
		private System.Nullable<decimal> _UnitPrice1;
		
		private string _ProductID;
		
		private System.DateTime _CreateDate;
		
		private EntitySet<Expenses> _Expenses;
		
		private EntitySet<Outputs> _Outputs;
		
		private EntityRef<StandardProducts> _StandardProducts;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(string value);
    partial void OnIDChanged();
    partial void OnOrderIDChanging(string value);
    partial void OnOrderIDChanged();
    partial void OnOrderItemIDChanging(string value);
    partial void OnOrderItemIDChanged();
    partial void OnAdminIDChanging(string value);
    partial void OnAdminIDChanged();
    partial void OnQuantityChanging(int value);
    partial void OnQuantityChanged();
    partial void OnCurrencyChanging(int value);
    partial void OnCurrencyChanged();
    partial void OnUnitPriceChanging(decimal value);
    partial void OnUnitPriceChanged();
    partial void OnCurrency1Changing(System.Nullable<int> value);
    partial void OnCurrency1Changed();
    partial void OnUnitPrice1Changing(System.Nullable<decimal> value);
    partial void OnUnitPrice1Changed();
    partial void OnProductIDChanging(string value);
    partial void OnProductIDChanged();
    partial void OnCreateDateChanging(System.DateTime value);
    partial void OnCreateDateChanged();
    #endregion
		
		public Inputs()
		{
			this._Expenses = new EntitySet<Expenses>(new Action<Expenses>(this.attach_Expenses), new Action<Expenses>(this.detach_Expenses));
			this._Outputs = new EntitySet<Outputs>(new Action<Outputs>(this.attach_Outputs), new Action<Outputs>(this.detach_Outputs));
			this._StandardProducts = default(EntityRef<StandardProducts>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrderID", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string OrderID
		{
			get
			{
				return this._OrderID;
			}
			set
			{
				if ((this._OrderID != value))
				{
					this.OnOrderIDChanging(value);
					this.SendPropertyChanging();
					this._OrderID = value;
					this.SendPropertyChanged("OrderID");
					this.OnOrderIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrderItemID", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string OrderItemID
		{
			get
			{
				return this._OrderItemID;
			}
			set
			{
				if ((this._OrderItemID != value))
				{
					this.OnOrderItemIDChanging(value);
					this.SendPropertyChanging();
					this._OrderItemID = value;
					this.SendPropertyChanged("OrderItemID");
					this.OnOrderItemIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AdminID", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string AdminID
		{
			get
			{
				return this._AdminID;
			}
			set
			{
				if ((this._AdminID != value))
				{
					this.OnAdminIDChanging(value);
					this.SendPropertyChanging();
					this._AdminID = value;
					this.SendPropertyChanged("AdminID");
					this.OnAdminIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Quantity", DbType="Int NOT NULL")]
		public int Quantity
		{
			get
			{
				return this._Quantity;
			}
			set
			{
				if ((this._Quantity != value))
				{
					this.OnQuantityChanging(value);
					this.SendPropertyChanging();
					this._Quantity = value;
					this.SendPropertyChanged("Quantity");
					this.OnQuantityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Currency", DbType="Int NOT NULL")]
		public int Currency
		{
			get
			{
				return this._Currency;
			}
			set
			{
				if ((this._Currency != value))
				{
					this.OnCurrencyChanging(value);
					this.SendPropertyChanging();
					this._Currency = value;
					this.SendPropertyChanged("Currency");
					this.OnCurrencyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UnitPrice", DbType="Decimal(18,5) NOT NULL")]
		public decimal UnitPrice
		{
			get
			{
				return this._UnitPrice;
			}
			set
			{
				if ((this._UnitPrice != value))
				{
					this.OnUnitPriceChanging(value);
					this.SendPropertyChanging();
					this._UnitPrice = value;
					this.SendPropertyChanged("UnitPrice");
					this.OnUnitPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Currency1", DbType="Int")]
		public System.Nullable<int> Currency1
		{
			get
			{
				return this._Currency1;
			}
			set
			{
				if ((this._Currency1 != value))
				{
					this.OnCurrency1Changing(value);
					this.SendPropertyChanging();
					this._Currency1 = value;
					this.SendPropertyChanged("Currency1");
					this.OnCurrency1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UnitPrice1", DbType="Decimal(18,5)")]
		public System.Nullable<decimal> UnitPrice1
		{
			get
			{
				return this._UnitPrice1;
			}
			set
			{
				if ((this._UnitPrice1 != value))
				{
					this.OnUnitPrice1Changing(value);
					this.SendPropertyChanging();
					this._UnitPrice1 = value;
					this.SendPropertyChanged("UnitPrice1");
					this.OnUnitPrice1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductID", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string ProductID
		{
			get
			{
				return this._ProductID;
			}
			set
			{
				if ((this._ProductID != value))
				{
					if (this._StandardProducts.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProductIDChanging(value);
					this.SendPropertyChanging();
					this._ProductID = value;
					this.SendPropertyChanged("ProductID");
					this.OnProductIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreateDate", DbType="DateTime NOT NULL")]
		public System.DateTime CreateDate
		{
			get
			{
				return this._CreateDate;
			}
			set
			{
				if ((this._CreateDate != value))
				{
					this.OnCreateDateChanging(value);
					this.SendPropertyChanging();
					this._CreateDate = value;
					this.SendPropertyChanged("CreateDate");
					this.OnCreateDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Inputs_Expenses", Storage="_Expenses", ThisKey="ID", OtherKey="InputID")]
		public EntitySet<Expenses> Expenses
		{
			get
			{
				return this._Expenses;
			}
			set
			{
				this._Expenses.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Inputs_Outputs", Storage="_Outputs", ThisKey="ID", OtherKey="InputID")]
		public EntitySet<Outputs> Outputs
		{
			get
			{
				return this._Outputs;
			}
			set
			{
				this._Outputs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="StandardProducts_Inputs", Storage="_StandardProducts", ThisKey="ProductID", OtherKey="ID", IsForeignKey=true)]
		public StandardProducts StandardProducts
		{
			get
			{
				return this._StandardProducts.Entity;
			}
			set
			{
				StandardProducts previousValue = this._StandardProducts.Entity;
				if (((previousValue != value) 
							|| (this._StandardProducts.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._StandardProducts.Entity = null;
						previousValue.Inputs.Remove(this);
					}
					this._StandardProducts.Entity = value;
					if ((value != null))
					{
						value.Inputs.Add(this);
						this._ProductID = value.ID;
					}
					else
					{
						this._ProductID = default(string);
					}
					this.SendPropertyChanged("StandardProducts");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Expenses(Expenses entity)
		{
			this.SendPropertyChanging();
			entity.Inputs = this;
		}
		
		private void detach_Expenses(Expenses entity)
		{
			this.SendPropertyChanging();
			entity.Inputs = null;
		}
		
		private void attach_Outputs(Outputs entity)
		{
			this.SendPropertyChanging();
			entity.Inputs = this;
		}
		
		private void detach_Outputs(Outputs entity)
		{
			this.SendPropertyChanging();
			entity.Inputs = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.OtherProducts")]
	public partial class OtherProducts : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _ProductID;
		
		private string _Format;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnProductIDChanging(string value);
    partial void OnProductIDChanged();
    partial void OnFormatChanging(string value);
    partial void OnFormatChanged();
    #endregion
		
		public OtherProducts()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductID", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string ProductID
		{
			get
			{
				return this._ProductID;
			}
			set
			{
				if ((this._ProductID != value))
				{
					this.OnProductIDChanging(value);
					this.SendPropertyChanging();
					this._ProductID = value;
					this.SendPropertyChanged("ProductID");
					this.OnProductIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Format", DbType="NVarChar(300)")]
		public string Format
		{
			get
			{
				return this._Format;
			}
			set
			{
				if ((this._Format != value))
				{
					this.OnFormatChanging(value);
					this.SendPropertyChanging();
					this._Format = value;
					this.SendPropertyChanged("Format");
					this.OnFormatChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.OutApplies")]
	public partial class OutApplies : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _ID;
		
		private string _InApplyID;
		
		private string _ApplyID;
		
		private string _ApplyItemID;
		
		private string _AdminID;
		
		private int _Quantity;
		
		private int _Currency;
		
		private decimal _UnitPrice;
		
		private System.DateTime _CreateDate;
		
		private EntitySet<ExitNotices> _ExitNotices;
		
		private EntityRef<InApplies> _InApplies;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(string value);
    partial void OnIDChanged();
    partial void OnInApplyIDChanging(string value);
    partial void OnInApplyIDChanged();
    partial void OnApplyIDChanging(string value);
    partial void OnApplyIDChanged();
    partial void OnApplyItemIDChanging(string value);
    partial void OnApplyItemIDChanged();
    partial void OnAdminIDChanging(string value);
    partial void OnAdminIDChanged();
    partial void OnQuantityChanging(int value);
    partial void OnQuantityChanged();
    partial void OnCurrencyChanging(int value);
    partial void OnCurrencyChanged();
    partial void OnUnitPriceChanging(decimal value);
    partial void OnUnitPriceChanged();
    partial void OnCreateDateChanging(System.DateTime value);
    partial void OnCreateDateChanged();
    #endregion
		
		public OutApplies()
		{
			this._ExitNotices = new EntitySet<ExitNotices>(new Action<ExitNotices>(this.attach_ExitNotices), new Action<ExitNotices>(this.detach_ExitNotices));
			this._InApplies = default(EntityRef<InApplies>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InApplyID", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string InApplyID
		{
			get
			{
				return this._InApplyID;
			}
			set
			{
				if ((this._InApplyID != value))
				{
					if (this._InApplies.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnInApplyIDChanging(value);
					this.SendPropertyChanging();
					this._InApplyID = value;
					this.SendPropertyChanged("InApplyID");
					this.OnInApplyIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ApplyID", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string ApplyID
		{
			get
			{
				return this._ApplyID;
			}
			set
			{
				if ((this._ApplyID != value))
				{
					this.OnApplyIDChanging(value);
					this.SendPropertyChanging();
					this._ApplyID = value;
					this.SendPropertyChanged("ApplyID");
					this.OnApplyIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ApplyItemID", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string ApplyItemID
		{
			get
			{
				return this._ApplyItemID;
			}
			set
			{
				if ((this._ApplyItemID != value))
				{
					this.OnApplyItemIDChanging(value);
					this.SendPropertyChanging();
					this._ApplyItemID = value;
					this.SendPropertyChanged("ApplyItemID");
					this.OnApplyItemIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AdminID", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string AdminID
		{
			get
			{
				return this._AdminID;
			}
			set
			{
				if ((this._AdminID != value))
				{
					this.OnAdminIDChanging(value);
					this.SendPropertyChanging();
					this._AdminID = value;
					this.SendPropertyChanged("AdminID");
					this.OnAdminIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Quantity", DbType="Int NOT NULL")]
		public int Quantity
		{
			get
			{
				return this._Quantity;
			}
			set
			{
				if ((this._Quantity != value))
				{
					this.OnQuantityChanging(value);
					this.SendPropertyChanging();
					this._Quantity = value;
					this.SendPropertyChanged("Quantity");
					this.OnQuantityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Currency", DbType="Int NOT NULL")]
		public int Currency
		{
			get
			{
				return this._Currency;
			}
			set
			{
				if ((this._Currency != value))
				{
					this.OnCurrencyChanging(value);
					this.SendPropertyChanging();
					this._Currency = value;
					this.SendPropertyChanged("Currency");
					this.OnCurrencyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UnitPrice", DbType="Decimal(18,5) NOT NULL")]
		public decimal UnitPrice
		{
			get
			{
				return this._UnitPrice;
			}
			set
			{
				if ((this._UnitPrice != value))
				{
					this.OnUnitPriceChanging(value);
					this.SendPropertyChanging();
					this._UnitPrice = value;
					this.SendPropertyChanged("UnitPrice");
					this.OnUnitPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreateDate", DbType="DateTime NOT NULL")]
		public System.DateTime CreateDate
		{
			get
			{
				return this._CreateDate;
			}
			set
			{
				if ((this._CreateDate != value))
				{
					this.OnCreateDateChanging(value);
					this.SendPropertyChanging();
					this._CreateDate = value;
					this.SendPropertyChanged("CreateDate");
					this.OnCreateDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="OutApplies_ExitNotices", Storage="_ExitNotices", ThisKey="ID", OtherKey="OutApplyID")]
		public EntitySet<ExitNotices> ExitNotices
		{
			get
			{
				return this._ExitNotices;
			}
			set
			{
				this._ExitNotices.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="InApplies_OutApplies", Storage="_InApplies", ThisKey="InApplyID", OtherKey="ID", IsForeignKey=true)]
		public InApplies InApplies
		{
			get
			{
				return this._InApplies.Entity;
			}
			set
			{
				InApplies previousValue = this._InApplies.Entity;
				if (((previousValue != value) 
							|| (this._InApplies.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._InApplies.Entity = null;
						previousValue.OutApplies.Remove(this);
					}
					this._InApplies.Entity = value;
					if ((value != null))
					{
						value.OutApplies.Add(this);
						this._InApplyID = value.ID;
					}
					else
					{
						this._InApplyID = default(string);
					}
					this.SendPropertyChanged("InApplies");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ExitNotices(ExitNotices entity)
		{
			this.SendPropertyChanging();
			entity.OutApplies = this;
		}
		
		private void detach_ExitNotices(ExitNotices entity)
		{
			this.SendPropertyChanging();
			entity.OutApplies = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Outputs")]
	public partial class Outputs : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _ID;
		
		private string _InputID;
		
		private string _OrderID;
		
		private string _OrderItemID;
		
		private string _AdminID;
		
		private int _Quantity;
		
		private int _Currency;
		
		private decimal _UnitPrice;
		
		private System.Nullable<int> _Currency1;
		
		private System.Nullable<decimal> _UnitPrice1;
		
		private System.DateTime _CreateDate;
		
		private EntitySet<ExitNotices> _ExitNotices;
		
		private EntityRef<Inputs> _Inputs;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(string value);
    partial void OnIDChanged();
    partial void OnInputIDChanging(string value);
    partial void OnInputIDChanged();
    partial void OnOrderIDChanging(string value);
    partial void OnOrderIDChanged();
    partial void OnOrderItemIDChanging(string value);
    partial void OnOrderItemIDChanged();
    partial void OnAdminIDChanging(string value);
    partial void OnAdminIDChanged();
    partial void OnQuantityChanging(int value);
    partial void OnQuantityChanged();
    partial void OnCurrencyChanging(int value);
    partial void OnCurrencyChanged();
    partial void OnUnitPriceChanging(decimal value);
    partial void OnUnitPriceChanged();
    partial void OnCurrency1Changing(System.Nullable<int> value);
    partial void OnCurrency1Changed();
    partial void OnUnitPrice1Changing(System.Nullable<decimal> value);
    partial void OnUnitPrice1Changed();
    partial void OnCreateDateChanging(System.DateTime value);
    partial void OnCreateDateChanged();
    #endregion
		
		public Outputs()
		{
			this._ExitNotices = new EntitySet<ExitNotices>(new Action<ExitNotices>(this.attach_ExitNotices), new Action<ExitNotices>(this.detach_ExitNotices));
			this._Inputs = default(EntityRef<Inputs>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InputID", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string InputID
		{
			get
			{
				return this._InputID;
			}
			set
			{
				if ((this._InputID != value))
				{
					if (this._Inputs.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnInputIDChanging(value);
					this.SendPropertyChanging();
					this._InputID = value;
					this.SendPropertyChanged("InputID");
					this.OnInputIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrderID", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string OrderID
		{
			get
			{
				return this._OrderID;
			}
			set
			{
				if ((this._OrderID != value))
				{
					this.OnOrderIDChanging(value);
					this.SendPropertyChanging();
					this._OrderID = value;
					this.SendPropertyChanged("OrderID");
					this.OnOrderIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrderItemID", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string OrderItemID
		{
			get
			{
				return this._OrderItemID;
			}
			set
			{
				if ((this._OrderItemID != value))
				{
					this.OnOrderItemIDChanging(value);
					this.SendPropertyChanging();
					this._OrderItemID = value;
					this.SendPropertyChanged("OrderItemID");
					this.OnOrderItemIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AdminID", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string AdminID
		{
			get
			{
				return this._AdminID;
			}
			set
			{
				if ((this._AdminID != value))
				{
					this.OnAdminIDChanging(value);
					this.SendPropertyChanging();
					this._AdminID = value;
					this.SendPropertyChanged("AdminID");
					this.OnAdminIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Quantity", DbType="Int NOT NULL")]
		public int Quantity
		{
			get
			{
				return this._Quantity;
			}
			set
			{
				if ((this._Quantity != value))
				{
					this.OnQuantityChanging(value);
					this.SendPropertyChanging();
					this._Quantity = value;
					this.SendPropertyChanged("Quantity");
					this.OnQuantityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Currency", DbType="Int NOT NULL")]
		public int Currency
		{
			get
			{
				return this._Currency;
			}
			set
			{
				if ((this._Currency != value))
				{
					this.OnCurrencyChanging(value);
					this.SendPropertyChanging();
					this._Currency = value;
					this.SendPropertyChanged("Currency");
					this.OnCurrencyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UnitPrice", DbType="Decimal(18,5) NOT NULL")]
		public decimal UnitPrice
		{
			get
			{
				return this._UnitPrice;
			}
			set
			{
				if ((this._UnitPrice != value))
				{
					this.OnUnitPriceChanging(value);
					this.SendPropertyChanging();
					this._UnitPrice = value;
					this.SendPropertyChanged("UnitPrice");
					this.OnUnitPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Currency1", DbType="Int")]
		public System.Nullable<int> Currency1
		{
			get
			{
				return this._Currency1;
			}
			set
			{
				if ((this._Currency1 != value))
				{
					this.OnCurrency1Changing(value);
					this.SendPropertyChanging();
					this._Currency1 = value;
					this.SendPropertyChanged("Currency1");
					this.OnCurrency1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UnitPrice1", DbType="Decimal(18,5)")]
		public System.Nullable<decimal> UnitPrice1
		{
			get
			{
				return this._UnitPrice1;
			}
			set
			{
				if ((this._UnitPrice1 != value))
				{
					this.OnUnitPrice1Changing(value);
					this.SendPropertyChanging();
					this._UnitPrice1 = value;
					this.SendPropertyChanged("UnitPrice1");
					this.OnUnitPrice1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreateDate", DbType="DateTime NOT NULL")]
		public System.DateTime CreateDate
		{
			get
			{
				return this._CreateDate;
			}
			set
			{
				if ((this._CreateDate != value))
				{
					this.OnCreateDateChanging(value);
					this.SendPropertyChanging();
					this._CreateDate = value;
					this.SendPropertyChanged("CreateDate");
					this.OnCreateDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Outputs_ExitNotices", Storage="_ExitNotices", ThisKey="ID", OtherKey="OutputID")]
		public EntitySet<ExitNotices> ExitNotices
		{
			get
			{
				return this._ExitNotices;
			}
			set
			{
				this._ExitNotices.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Inputs_Outputs", Storage="_Inputs", ThisKey="InputID", OtherKey="ID", IsForeignKey=true)]
		public Inputs Inputs
		{
			get
			{
				return this._Inputs.Entity;
			}
			set
			{
				Inputs previousValue = this._Inputs.Entity;
				if (((previousValue != value) 
							|| (this._Inputs.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Inputs.Entity = null;
						previousValue.Outputs.Remove(this);
					}
					this._Inputs.Entity = value;
					if ((value != null))
					{
						value.Outputs.Add(this);
						this._InputID = value.ID;
					}
					else
					{
						this._InputID = default(string);
					}
					this.SendPropertyChanged("Inputs");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ExitNotices(ExitNotices entity)
		{
			this.SendPropertyChanging();
			entity.Outputs = this;
		}
		
		private void detach_ExitNotices(ExitNotices entity)
		{
			this.SendPropertyChanging();
			entity.Outputs = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Parties")]
	public partial class Parties : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _ID;
		
		private string _CompanyID;
		
		private string _ContactID;
		
		private int _District;
		
		private string _Address;
		
		private string _ZipCode;
		
		private System.DateTime _CreateDate;
		
		private string _Summary;
		
		private string _AdminID;
		
		private string _ClientID;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(string value);
    partial void OnIDChanged();
    partial void OnCompanyIDChanging(string value);
    partial void OnCompanyIDChanged();
    partial void OnContactIDChanging(string value);
    partial void OnContactIDChanged();
    partial void OnDistrictChanging(int value);
    partial void OnDistrictChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnZipCodeChanging(string value);
    partial void OnZipCodeChanged();
    partial void OnCreateDateChanging(System.DateTime value);
    partial void OnCreateDateChanged();
    partial void OnSummaryChanging(string value);
    partial void OnSummaryChanged();
    partial void OnAdminIDChanging(string value);
    partial void OnAdminIDChanged();
    partial void OnClientIDChanging(string value);
    partial void OnClientIDChanged();
    #endregion
		
		public Parties()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompanyID", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string CompanyID
		{
			get
			{
				return this._CompanyID;
			}
			set
			{
				if ((this._CompanyID != value))
				{
					this.OnCompanyIDChanging(value);
					this.SendPropertyChanging();
					this._CompanyID = value;
					this.SendPropertyChanged("CompanyID");
					this.OnCompanyIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContactID", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string ContactID
		{
			get
			{
				return this._ContactID;
			}
			set
			{
				if ((this._ContactID != value))
				{
					this.OnContactIDChanging(value);
					this.SendPropertyChanging();
					this._ContactID = value;
					this.SendPropertyChanged("ContactID");
					this.OnContactIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_District", DbType="Int NOT NULL")]
		public int District
		{
			get
			{
				return this._District;
			}
			set
			{
				if ((this._District != value))
				{
					this.OnDistrictChanging(value);
					this.SendPropertyChanging();
					this._District = value;
					this.SendPropertyChanged("District");
					this.OnDistrictChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address", DbType="NVarChar(150) NOT NULL", CanBeNull=false)]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ZipCode", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string ZipCode
		{
			get
			{
				return this._ZipCode;
			}
			set
			{
				if ((this._ZipCode != value))
				{
					this.OnZipCodeChanging(value);
					this.SendPropertyChanging();
					this._ZipCode = value;
					this.SendPropertyChanged("ZipCode");
					this.OnZipCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreateDate", DbType="DateTime NOT NULL")]
		public System.DateTime CreateDate
		{
			get
			{
				return this._CreateDate;
			}
			set
			{
				if ((this._CreateDate != value))
				{
					this.OnCreateDateChanging(value);
					this.SendPropertyChanging();
					this._CreateDate = value;
					this.SendPropertyChanged("CreateDate");
					this.OnCreateDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Summary", DbType="NVarChar(300)")]
		public string Summary
		{
			get
			{
				return this._Summary;
			}
			set
			{
				if ((this._Summary != value))
				{
					this.OnSummaryChanging(value);
					this.SendPropertyChanging();
					this._Summary = value;
					this.SendPropertyChanged("Summary");
					this.OnSummaryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AdminID", DbType="VarChar(50)")]
		public string AdminID
		{
			get
			{
				return this._AdminID;
			}
			set
			{
				if ((this._AdminID != value))
				{
					this.OnAdminIDChanging(value);
					this.SendPropertyChanging();
					this._AdminID = value;
					this.SendPropertyChanged("AdminID");
					this.OnAdminIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClientID", DbType="VarChar(50)")]
		public string ClientID
		{
			get
			{
				return this._ClientID;
			}
			set
			{
				if ((this._ClientID != value))
				{
					this.OnClientIDChanging(value);
					this.SendPropertyChanging();
					this._ClientID = value;
					this.SendPropertyChanged("ClientID");
					this.OnClientIDChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Pickings")]
	public partial class Pickings : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _ID;
		
		private string _FlowStorageID;
		
		private string _StroeSorageID;
		
		private string _RunStorageID;
		
		private string _BoxIndex;
		
		private int _Quantity;
		
		private string _ProductID;
		
		private string _AdminID;
		
		private System.DateTime _CreateDate;
		
		private EntitySet<Expenses> _Expenses;
		
		private EntitySet<Forms> _Forms;
		
		private EntitySet<StroeStorages> _StroeStorages1;
		
		private EntitySet<TransferItems> _TransferItems;
		
		private EntityRef<FlowStorages> _FlowStorages;
		
		private EntityRef<StroeStorages> _StroeStorages;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(string value);
    partial void OnIDChanged();
    partial void OnFlowStorageIDChanging(string value);
    partial void OnFlowStorageIDChanged();
    partial void OnStroeSorageIDChanging(string value);
    partial void OnStroeSorageIDChanged();
    partial void OnRunStorageIDChanging(string value);
    partial void OnRunStorageIDChanged();
    partial void OnBoxIndexChanging(string value);
    partial void OnBoxIndexChanged();
    partial void OnQuantityChanging(int value);
    partial void OnQuantityChanged();
    partial void OnProductIDChanging(string value);
    partial void OnProductIDChanged();
    partial void OnAdminIDChanging(string value);
    partial void OnAdminIDChanged();
    partial void OnCreateDateChanging(System.DateTime value);
    partial void OnCreateDateChanged();
    #endregion
		
		public Pickings()
		{
			this._Expenses = new EntitySet<Expenses>(new Action<Expenses>(this.attach_Expenses), new Action<Expenses>(this.detach_Expenses));
			this._Forms = new EntitySet<Forms>(new Action<Forms>(this.attach_Forms), new Action<Forms>(this.detach_Forms));
			this._StroeStorages1 = new EntitySet<StroeStorages>(new Action<StroeStorages>(this.attach_StroeStorages1), new Action<StroeStorages>(this.detach_StroeStorages1));
			this._TransferItems = new EntitySet<TransferItems>(new Action<TransferItems>(this.attach_TransferItems), new Action<TransferItems>(this.detach_TransferItems));
			this._FlowStorages = default(EntityRef<FlowStorages>);
			this._StroeStorages = default(EntityRef<StroeStorages>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FlowStorageID", DbType="VarChar(50)")]
		public string FlowStorageID
		{
			get
			{
				return this._FlowStorageID;
			}
			set
			{
				if ((this._FlowStorageID != value))
				{
					if (this._FlowStorages.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFlowStorageIDChanging(value);
					this.SendPropertyChanging();
					this._FlowStorageID = value;
					this.SendPropertyChanged("FlowStorageID");
					this.OnFlowStorageIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StroeSorageID", DbType="VarChar(50)")]
		public string StroeSorageID
		{
			get
			{
				return this._StroeSorageID;
			}
			set
			{
				if ((this._StroeSorageID != value))
				{
					if (this._StroeStorages.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStroeSorageIDChanging(value);
					this.SendPropertyChanging();
					this._StroeSorageID = value;
					this.SendPropertyChanged("StroeSorageID");
					this.OnStroeSorageIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RunStorageID", DbType="VarChar(50)")]
		public string RunStorageID
		{
			get
			{
				return this._RunStorageID;
			}
			set
			{
				if ((this._RunStorageID != value))
				{
					this.OnRunStorageIDChanging(value);
					this.SendPropertyChanging();
					this._RunStorageID = value;
					this.SendPropertyChanged("RunStorageID");
					this.OnRunStorageIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BoxIndex", DbType="VarChar(50)")]
		public string BoxIndex
		{
			get
			{
				return this._BoxIndex;
			}
			set
			{
				if ((this._BoxIndex != value))
				{
					this.OnBoxIndexChanging(value);
					this.SendPropertyChanging();
					this._BoxIndex = value;
					this.SendPropertyChanged("BoxIndex");
					this.OnBoxIndexChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Quantity", DbType="Int NOT NULL")]
		public int Quantity
		{
			get
			{
				return this._Quantity;
			}
			set
			{
				if ((this._Quantity != value))
				{
					this.OnQuantityChanging(value);
					this.SendPropertyChanging();
					this._Quantity = value;
					this.SendPropertyChanged("Quantity");
					this.OnQuantityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductID", DbType="VarChar(50)")]
		public string ProductID
		{
			get
			{
				return this._ProductID;
			}
			set
			{
				if ((this._ProductID != value))
				{
					this.OnProductIDChanging(value);
					this.SendPropertyChanging();
					this._ProductID = value;
					this.SendPropertyChanged("ProductID");
					this.OnProductIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AdminID", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string AdminID
		{
			get
			{
				return this._AdminID;
			}
			set
			{
				if ((this._AdminID != value))
				{
					this.OnAdminIDChanging(value);
					this.SendPropertyChanging();
					this._AdminID = value;
					this.SendPropertyChanged("AdminID");
					this.OnAdminIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreateDate", DbType="DateTime NOT NULL")]
		public System.DateTime CreateDate
		{
			get
			{
				return this._CreateDate;
			}
			set
			{
				if ((this._CreateDate != value))
				{
					this.OnCreateDateChanging(value);
					this.SendPropertyChanging();
					this._CreateDate = value;
					this.SendPropertyChanged("CreateDate");
					this.OnCreateDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Pickings_Expenses", Storage="_Expenses", ThisKey="ID", OtherKey="PickingID")]
		public EntitySet<Expenses> Expenses
		{
			get
			{
				return this._Expenses;
			}
			set
			{
				this._Expenses.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Pickings_Forms", Storage="_Forms", ThisKey="ID", OtherKey="PickingID")]
		public EntitySet<Forms> Forms
		{
			get
			{
				return this._Forms;
			}
			set
			{
				this._Forms.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Pickings_StroeStorages", Storage="_StroeStorages1", ThisKey="ID", OtherKey="PickingID")]
		public EntitySet<StroeStorages> StroeStorages1
		{
			get
			{
				return this._StroeStorages1;
			}
			set
			{
				this._StroeStorages1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Pickings_TransferItems", Storage="_TransferItems", ThisKey="ID", OtherKey="PickingID")]
		public EntitySet<TransferItems> TransferItems
		{
			get
			{
				return this._TransferItems;
			}
			set
			{
				this._TransferItems.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FlowStorages_Pickings", Storage="_FlowStorages", ThisKey="FlowStorageID", OtherKey="ID", IsForeignKey=true)]
		public FlowStorages FlowStorages
		{
			get
			{
				return this._FlowStorages.Entity;
			}
			set
			{
				FlowStorages previousValue = this._FlowStorages.Entity;
				if (((previousValue != value) 
							|| (this._FlowStorages.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._FlowStorages.Entity = null;
						previousValue.Pickings.Remove(this);
					}
					this._FlowStorages.Entity = value;
					if ((value != null))
					{
						value.Pickings.Add(this);
						this._FlowStorageID = value.ID;
					}
					else
					{
						this._FlowStorageID = default(string);
					}
					this.SendPropertyChanged("FlowStorages");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="StroeStorages_Pickings", Storage="_StroeStorages", ThisKey="StroeSorageID", OtherKey="ID", IsForeignKey=true)]
		public StroeStorages StroeStorages
		{
			get
			{
				return this._StroeStorages.Entity;
			}
			set
			{
				StroeStorages previousValue = this._StroeStorages.Entity;
				if (((previousValue != value) 
							|| (this._StroeStorages.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._StroeStorages.Entity = null;
						previousValue.Pickings.Remove(this);
					}
					this._StroeStorages.Entity = value;
					if ((value != null))
					{
						value.Pickings.Add(this);
						this._StroeSorageID = value.ID;
					}
					else
					{
						this._StroeSorageID = default(string);
					}
					this.SendPropertyChanged("StroeStorages");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Expenses(Expenses entity)
		{
			this.SendPropertyChanging();
			entity.Pickings = this;
		}
		
		private void detach_Expenses(Expenses entity)
		{
			this.SendPropertyChanging();
			entity.Pickings = null;
		}
		
		private void attach_Forms(Forms entity)
		{
			this.SendPropertyChanging();
			entity.Pickings = this;
		}
		
		private void detach_Forms(Forms entity)
		{
			this.SendPropertyChanging();
			entity.Pickings = null;
		}
		
		private void attach_StroeStorages1(StroeStorages entity)
		{
			this.SendPropertyChanging();
			entity.Pickings1 = this;
		}
		
		private void detach_StroeStorages1(StroeStorages entity)
		{
			this.SendPropertyChanging();
			entity.Pickings1 = null;
		}
		
		private void attach_TransferItems(TransferItems entity)
		{
			this.SendPropertyChanging();
			entity.Pickings = this;
		}
		
		private void detach_TransferItems(TransferItems entity)
		{
			this.SendPropertyChanging();
			entity.Pickings = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PrimaryKeys")]
	public partial class PrimaryKeys : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Name;
		
		private int _Type;
		
		private int _Length;
		
		private int _Value;
		
		private int _Day;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnTypeChanging(int value);
    partial void OnTypeChanged();
    partial void OnLengthChanging(int value);
    partial void OnLengthChanged();
    partial void OnValueChanging(int value);
    partial void OnValueChanged();
    partial void OnDayChanging(int value);
    partial void OnDayChanged();
    #endregion
		
		public PrimaryKeys()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type", DbType="Int NOT NULL")]
		public int Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Length", DbType="Int NOT NULL")]
		public int Length
		{
			get
			{
				return this._Length;
			}
			set
			{
				if ((this._Length != value))
				{
					this.OnLengthChanging(value);
					this.SendPropertyChanging();
					this._Length = value;
					this.SendPropertyChanged("Length");
					this.OnLengthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Value", DbType="Int NOT NULL")]
		public int Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this.OnValueChanging(value);
					this.SendPropertyChanging();
					this._Value = value;
					this.SendPropertyChanged("Value");
					this.OnValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Day", DbType="Int NOT NULL")]
		public int Day
		{
			get
			{
				return this._Day;
			}
			set
			{
				if ((this._Day != value))
				{
					this.OnDayChanging(value);
					this.SendPropertyChanging();
					this._Day = value;
					this.SendPropertyChanged("Day");
					this.OnDayChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Reports")]
	public partial class Reports : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _ID;
		
		private int _Type;
		
		private string _AdminID;
		
		private string _ReporterID;
		
		private string _Properties;
		
		private int _Status;
		
		private System.DateTime _CreateDate;
		
		private System.DateTime _UpdateDate;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(string value);
    partial void OnIDChanged();
    partial void OnTypeChanging(int value);
    partial void OnTypeChanged();
    partial void OnAdminIDChanging(string value);
    partial void OnAdminIDChanged();
    partial void OnReporterIDChanging(string value);
    partial void OnReporterIDChanged();
    partial void OnPropertiesChanging(string value);
    partial void OnPropertiesChanged();
    partial void OnStatusChanging(int value);
    partial void OnStatusChanged();
    partial void OnCreateDateChanging(System.DateTime value);
    partial void OnCreateDateChanged();
    partial void OnUpdateDateChanging(System.DateTime value);
    partial void OnUpdateDateChanged();
    #endregion
		
		public Reports()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type", DbType="Int NOT NULL")]
		public int Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AdminID", DbType="VarChar(50)")]
		public string AdminID
		{
			get
			{
				return this._AdminID;
			}
			set
			{
				if ((this._AdminID != value))
				{
					this.OnAdminIDChanging(value);
					this.SendPropertyChanging();
					this._AdminID = value;
					this.SendPropertyChanged("AdminID");
					this.OnAdminIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReporterID", DbType="VarChar(50)")]
		public string ReporterID
		{
			get
			{
				return this._ReporterID;
			}
			set
			{
				if ((this._ReporterID != value))
				{
					this.OnReporterIDChanging(value);
					this.SendPropertyChanging();
					this._ReporterID = value;
					this.SendPropertyChanged("ReporterID");
					this.OnReporterIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Properties", DbType="NText NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Properties
		{
			get
			{
				return this._Properties;
			}
			set
			{
				if ((this._Properties != value))
				{
					this.OnPropertiesChanging(value);
					this.SendPropertyChanging();
					this._Properties = value;
					this.SendPropertyChanged("Properties");
					this.OnPropertiesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="Int NOT NULL")]
		public int Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreateDate", DbType="DateTime NOT NULL")]
		public System.DateTime CreateDate
		{
			get
			{
				return this._CreateDate;
			}
			set
			{
				if ((this._CreateDate != value))
				{
					this.OnCreateDateChanging(value);
					this.SendPropertyChanging();
					this._CreateDate = value;
					this.SendPropertyChanged("CreateDate");
					this.OnCreateDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UpdateDate", DbType="DateTime NOT NULL")]
		public System.DateTime UpdateDate
		{
			get
			{
				return this._UpdateDate;
			}
			set
			{
				if ((this._UpdateDate != value))
				{
					this.OnUpdateDateChanging(value);
					this.SendPropertyChanging();
					this._UpdateDate = value;
					this.SendPropertyChanged("UpdateDate");
					this.OnUpdateDateChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.RunStorages")]
	public partial class RunStorages : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _ID;
		
		private string _OrderID;
		
		private string _SortingID;
		
		private string _PickingID;
		
		private string _InputID;
		
		private string _InApplyID;
		
		private string _ProductID;
		
		private int _Quantity;
		
		private System.DateTime _CreateDate;
		
		private System.DateTime _UpdateDate;
		
		private int _Status;
		
		private string _Summary;
		
		private string _ShelveCode;
		
		private string _Prices;
		
		private EntitySet<Forms> _Forms;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(string value);
    partial void OnIDChanged();
    partial void OnOrderIDChanging(string value);
    partial void OnOrderIDChanged();
    partial void OnSortingIDChanging(string value);
    partial void OnSortingIDChanged();
    partial void OnPickingIDChanging(string value);
    partial void OnPickingIDChanged();
    partial void OnInputIDChanging(string value);
    partial void OnInputIDChanged();
    partial void OnInApplyIDChanging(string value);
    partial void OnInApplyIDChanged();
    partial void OnProductIDChanging(string value);
    partial void OnProductIDChanged();
    partial void OnQuantityChanging(int value);
    partial void OnQuantityChanged();
    partial void OnCreateDateChanging(System.DateTime value);
    partial void OnCreateDateChanged();
    partial void OnUpdateDateChanging(System.DateTime value);
    partial void OnUpdateDateChanged();
    partial void OnStatusChanging(int value);
    partial void OnStatusChanged();
    partial void OnSummaryChanging(string value);
    partial void OnSummaryChanged();
    partial void OnShelveCodeChanging(string value);
    partial void OnShelveCodeChanged();
    partial void OnPricesChanging(string value);
    partial void OnPricesChanged();
    #endregion
		
		public RunStorages()
		{
			this._Forms = new EntitySet<Forms>(new Action<Forms>(this.attach_Forms), new Action<Forms>(this.detach_Forms));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrderID", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string OrderID
		{
			get
			{
				return this._OrderID;
			}
			set
			{
				if ((this._OrderID != value))
				{
					this.OnOrderIDChanging(value);
					this.SendPropertyChanging();
					this._OrderID = value;
					this.SendPropertyChanged("OrderID");
					this.OnOrderIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SortingID", DbType="VarChar(50)")]
		public string SortingID
		{
			get
			{
				return this._SortingID;
			}
			set
			{
				if ((this._SortingID != value))
				{
					this.OnSortingIDChanging(value);
					this.SendPropertyChanging();
					this._SortingID = value;
					this.SendPropertyChanged("SortingID");
					this.OnSortingIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PickingID", DbType="VarChar(50)")]
		public string PickingID
		{
			get
			{
				return this._PickingID;
			}
			set
			{
				if ((this._PickingID != value))
				{
					this.OnPickingIDChanging(value);
					this.SendPropertyChanging();
					this._PickingID = value;
					this.SendPropertyChanged("PickingID");
					this.OnPickingIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InputID", DbType="VarChar(50)")]
		public string InputID
		{
			get
			{
				return this._InputID;
			}
			set
			{
				if ((this._InputID != value))
				{
					this.OnInputIDChanging(value);
					this.SendPropertyChanging();
					this._InputID = value;
					this.SendPropertyChanged("InputID");
					this.OnInputIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InApplyID", DbType="VarChar(50)")]
		public string InApplyID
		{
			get
			{
				return this._InApplyID;
			}
			set
			{
				if ((this._InApplyID != value))
				{
					this.OnInApplyIDChanging(value);
					this.SendPropertyChanging();
					this._InApplyID = value;
					this.SendPropertyChanged("InApplyID");
					this.OnInApplyIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductID", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string ProductID
		{
			get
			{
				return this._ProductID;
			}
			set
			{
				if ((this._ProductID != value))
				{
					this.OnProductIDChanging(value);
					this.SendPropertyChanging();
					this._ProductID = value;
					this.SendPropertyChanged("ProductID");
					this.OnProductIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Quantity", DbType="Int NOT NULL")]
		public int Quantity
		{
			get
			{
				return this._Quantity;
			}
			set
			{
				if ((this._Quantity != value))
				{
					this.OnQuantityChanging(value);
					this.SendPropertyChanging();
					this._Quantity = value;
					this.SendPropertyChanged("Quantity");
					this.OnQuantityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreateDate", DbType="DateTime NOT NULL")]
		public System.DateTime CreateDate
		{
			get
			{
				return this._CreateDate;
			}
			set
			{
				if ((this._CreateDate != value))
				{
					this.OnCreateDateChanging(value);
					this.SendPropertyChanging();
					this._CreateDate = value;
					this.SendPropertyChanged("CreateDate");
					this.OnCreateDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UpdateDate", DbType="DateTime NOT NULL")]
		public System.DateTime UpdateDate
		{
			get
			{
				return this._UpdateDate;
			}
			set
			{
				if ((this._UpdateDate != value))
				{
					this.OnUpdateDateChanging(value);
					this.SendPropertyChanging();
					this._UpdateDate = value;
					this.SendPropertyChanged("UpdateDate");
					this.OnUpdateDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="Int NOT NULL")]
		public int Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Summary", DbType="NVarChar(100)")]
		public string Summary
		{
			get
			{
				return this._Summary;
			}
			set
			{
				if ((this._Summary != value))
				{
					this.OnSummaryChanging(value);
					this.SendPropertyChanging();
					this._Summary = value;
					this.SendPropertyChanged("Summary");
					this.OnSummaryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ShelveCode", DbType="VarChar(50)")]
		public string ShelveCode
		{
			get
			{
				return this._ShelveCode;
			}
			set
			{
				if ((this._ShelveCode != value))
				{
					this.OnShelveCodeChanging(value);
					this.SendPropertyChanging();
					this._ShelveCode = value;
					this.SendPropertyChanged("ShelveCode");
					this.OnShelveCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Prices", DbType="NChar(10)")]
		public string Prices
		{
			get
			{
				return this._Prices;
			}
			set
			{
				if ((this._Prices != value))
				{
					this.OnPricesChanging(value);
					this.SendPropertyChanging();
					this._Prices = value;
					this.SendPropertyChanged("Prices");
					this.OnPricesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RunStorages_Forms", Storage="_Forms", ThisKey="ID", OtherKey="RunID")]
		public EntitySet<Forms> Forms
		{
			get
			{
				return this._Forms;
			}
			set
			{
				this._Forms.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Forms(Forms entity)
		{
			this.SendPropertyChanging();
			entity.RunStorages = this;
		}
		
		private void detach_Forms(Forms entity)
		{
			this.SendPropertyChanging();
			entity.RunStorages = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Shelves")]
	public partial class Shelves : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _ID;
		
		private string _StockID;
		
		private string _BoxIndex;
		
		private EntitySet<FlowStorages> _FlowStorages;
		
		private EntitySet<StroeStorages> _StroeStorages;
		
		private EntityRef<Stocks> _Stocks;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(string value);
    partial void OnIDChanged();
    partial void OnStockIDChanging(string value);
    partial void OnStockIDChanged();
    partial void OnBoxIndexChanging(string value);
    partial void OnBoxIndexChanged();
    #endregion
		
		public Shelves()
		{
			this._FlowStorages = new EntitySet<FlowStorages>(new Action<FlowStorages>(this.attach_FlowStorages), new Action<FlowStorages>(this.detach_FlowStorages));
			this._StroeStorages = new EntitySet<StroeStorages>(new Action<StroeStorages>(this.attach_StroeStorages), new Action<StroeStorages>(this.detach_StroeStorages));
			this._Stocks = default(EntityRef<Stocks>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StockID", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string StockID
		{
			get
			{
				return this._StockID;
			}
			set
			{
				if ((this._StockID != value))
				{
					if (this._Stocks.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStockIDChanging(value);
					this.SendPropertyChanging();
					this._StockID = value;
					this.SendPropertyChanged("StockID");
					this.OnStockIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BoxIndex", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string BoxIndex
		{
			get
			{
				return this._BoxIndex;
			}
			set
			{
				if ((this._BoxIndex != value))
				{
					this.OnBoxIndexChanging(value);
					this.SendPropertyChanging();
					this._BoxIndex = value;
					this.SendPropertyChanged("BoxIndex");
					this.OnBoxIndexChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Shelves_FlowStorages", Storage="_FlowStorages", ThisKey="ID", OtherKey="ShelveID")]
		public EntitySet<FlowStorages> FlowStorages
		{
			get
			{
				return this._FlowStorages;
			}
			set
			{
				this._FlowStorages.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Shelves_StroeStorages", Storage="_StroeStorages", ThisKey="ID", OtherKey="ShelveID")]
		public EntitySet<StroeStorages> StroeStorages
		{
			get
			{
				return this._StroeStorages;
			}
			set
			{
				this._StroeStorages.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Stocks_Shelves", Storage="_Stocks", ThisKey="StockID", OtherKey="ID", IsForeignKey=true)]
		public Stocks Stocks
		{
			get
			{
				return this._Stocks.Entity;
			}
			set
			{
				Stocks previousValue = this._Stocks.Entity;
				if (((previousValue != value) 
							|| (this._Stocks.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Stocks.Entity = null;
						previousValue.Shelves.Remove(this);
					}
					this._Stocks.Entity = value;
					if ((value != null))
					{
						value.Shelves.Add(this);
						this._StockID = value.ID;
					}
					else
					{
						this._StockID = default(string);
					}
					this.SendPropertyChanged("Stocks");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_FlowStorages(FlowStorages entity)
		{
			this.SendPropertyChanging();
			entity.Shelves = this;
		}
		
		private void detach_FlowStorages(FlowStorages entity)
		{
			this.SendPropertyChanging();
			entity.Shelves = null;
		}
		
		private void attach_StroeStorages(StroeStorages entity)
		{
			this.SendPropertyChanging();
			entity.Shelves = this;
		}
		
		private void detach_StroeStorages(StroeStorages entity)
		{
			this.SendPropertyChanging();
			entity.Shelves = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Sortings")]
	public partial class Sortings : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _ID;
		
		private string _EntryNoticeID;
		
		private string _WaybillID;
		
		private string _AdminID;
		
		private string _BoxIndex;
		
		private System.Nullable<int> _Quantity;
		
		private string _ProductID;
		
		private System.DateTime _CreateDate;
		
		private System.Nullable<decimal> _Weight;
		
		private EntitySet<Expenses> _Expenses;
		
		private EntitySet<FlowStorages> _FlowStorages;
		
		private EntitySet<StroeStorages> _StroeStorages;
		
		private EntitySet<TransferItems> _TransferItems;
		
		private EntityRef<StandardProducts> _StandardProducts;
		
		private EntityRef<Waybills> _Waybills;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(string value);
    partial void OnIDChanged();
    partial void OnEntryNoticeIDChanging(string value);
    partial void OnEntryNoticeIDChanged();
    partial void OnWaybillIDChanging(string value);
    partial void OnWaybillIDChanged();
    partial void OnAdminIDChanging(string value);
    partial void OnAdminIDChanged();
    partial void OnBoxIndexChanging(string value);
    partial void OnBoxIndexChanged();
    partial void OnQuantityChanging(System.Nullable<int> value);
    partial void OnQuantityChanged();
    partial void OnProductIDChanging(string value);
    partial void OnProductIDChanged();
    partial void OnCreateDateChanging(System.DateTime value);
    partial void OnCreateDateChanged();
    partial void OnWeightChanging(System.Nullable<decimal> value);
    partial void OnWeightChanged();
    #endregion
		
		public Sortings()
		{
			this._Expenses = new EntitySet<Expenses>(new Action<Expenses>(this.attach_Expenses), new Action<Expenses>(this.detach_Expenses));
			this._FlowStorages = new EntitySet<FlowStorages>(new Action<FlowStorages>(this.attach_FlowStorages), new Action<FlowStorages>(this.detach_FlowStorages));
			this._StroeStorages = new EntitySet<StroeStorages>(new Action<StroeStorages>(this.attach_StroeStorages), new Action<StroeStorages>(this.detach_StroeStorages));
			this._TransferItems = new EntitySet<TransferItems>(new Action<TransferItems>(this.attach_TransferItems), new Action<TransferItems>(this.detach_TransferItems));
			this._StandardProducts = default(EntityRef<StandardProducts>);
			this._Waybills = default(EntityRef<Waybills>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EntryNoticeID", DbType="VarChar(50)")]
		public string EntryNoticeID
		{
			get
			{
				return this._EntryNoticeID;
			}
			set
			{
				if ((this._EntryNoticeID != value))
				{
					this.OnEntryNoticeIDChanging(value);
					this.SendPropertyChanging();
					this._EntryNoticeID = value;
					this.SendPropertyChanged("EntryNoticeID");
					this.OnEntryNoticeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WaybillID", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string WaybillID
		{
			get
			{
				return this._WaybillID;
			}
			set
			{
				if ((this._WaybillID != value))
				{
					if (this._Waybills.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnWaybillIDChanging(value);
					this.SendPropertyChanging();
					this._WaybillID = value;
					this.SendPropertyChanged("WaybillID");
					this.OnWaybillIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AdminID", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string AdminID
		{
			get
			{
				return this._AdminID;
			}
			set
			{
				if ((this._AdminID != value))
				{
					this.OnAdminIDChanging(value);
					this.SendPropertyChanging();
					this._AdminID = value;
					this.SendPropertyChanged("AdminID");
					this.OnAdminIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BoxIndex", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string BoxIndex
		{
			get
			{
				return this._BoxIndex;
			}
			set
			{
				if ((this._BoxIndex != value))
				{
					this.OnBoxIndexChanging(value);
					this.SendPropertyChanging();
					this._BoxIndex = value;
					this.SendPropertyChanged("BoxIndex");
					this.OnBoxIndexChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Quantity", DbType="Int")]
		public System.Nullable<int> Quantity
		{
			get
			{
				return this._Quantity;
			}
			set
			{
				if ((this._Quantity != value))
				{
					this.OnQuantityChanging(value);
					this.SendPropertyChanging();
					this._Quantity = value;
					this.SendPropertyChanged("Quantity");
					this.OnQuantityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductID", DbType="VarChar(50)")]
		public string ProductID
		{
			get
			{
				return this._ProductID;
			}
			set
			{
				if ((this._ProductID != value))
				{
					if (this._StandardProducts.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProductIDChanging(value);
					this.SendPropertyChanging();
					this._ProductID = value;
					this.SendPropertyChanged("ProductID");
					this.OnProductIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreateDate", DbType="DateTime NOT NULL")]
		public System.DateTime CreateDate
		{
			get
			{
				return this._CreateDate;
			}
			set
			{
				if ((this._CreateDate != value))
				{
					this.OnCreateDateChanging(value);
					this.SendPropertyChanging();
					this._CreateDate = value;
					this.SendPropertyChanged("CreateDate");
					this.OnCreateDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Weight", DbType="Decimal(18,5)")]
		public System.Nullable<decimal> Weight
		{
			get
			{
				return this._Weight;
			}
			set
			{
				if ((this._Weight != value))
				{
					this.OnWeightChanging(value);
					this.SendPropertyChanging();
					this._Weight = value;
					this.SendPropertyChanged("Weight");
					this.OnWeightChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Sortings_Expenses", Storage="_Expenses", ThisKey="ID", OtherKey="SortingID")]
		public EntitySet<Expenses> Expenses
		{
			get
			{
				return this._Expenses;
			}
			set
			{
				this._Expenses.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Sortings_FlowStorages", Storage="_FlowStorages", ThisKey="ID", OtherKey="SortingID")]
		public EntitySet<FlowStorages> FlowStorages
		{
			get
			{
				return this._FlowStorages;
			}
			set
			{
				this._FlowStorages.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Sortings_StroeStorages", Storage="_StroeStorages", ThisKey="ID", OtherKey="SortingID")]
		public EntitySet<StroeStorages> StroeStorages
		{
			get
			{
				return this._StroeStorages;
			}
			set
			{
				this._StroeStorages.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Sortings_TransferItems", Storage="_TransferItems", ThisKey="ID", OtherKey="SortingID")]
		public EntitySet<TransferItems> TransferItems
		{
			get
			{
				return this._TransferItems;
			}
			set
			{
				this._TransferItems.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="StandardProducts_Sortings", Storage="_StandardProducts", ThisKey="ProductID", OtherKey="ID", IsForeignKey=true)]
		public StandardProducts StandardProducts
		{
			get
			{
				return this._StandardProducts.Entity;
			}
			set
			{
				StandardProducts previousValue = this._StandardProducts.Entity;
				if (((previousValue != value) 
							|| (this._StandardProducts.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._StandardProducts.Entity = null;
						previousValue.Sortings.Remove(this);
					}
					this._StandardProducts.Entity = value;
					if ((value != null))
					{
						value.Sortings.Add(this);
						this._ProductID = value.ID;
					}
					else
					{
						this._ProductID = default(string);
					}
					this.SendPropertyChanged("StandardProducts");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Waybills_Sortings", Storage="_Waybills", ThisKey="WaybillID", OtherKey="ID", IsForeignKey=true)]
		public Waybills Waybills
		{
			get
			{
				return this._Waybills.Entity;
			}
			set
			{
				Waybills previousValue = this._Waybills.Entity;
				if (((previousValue != value) 
							|| (this._Waybills.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Waybills.Entity = null;
						previousValue.Sortings.Remove(this);
					}
					this._Waybills.Entity = value;
					if ((value != null))
					{
						value.Sortings.Add(this);
						this._WaybillID = value.ID;
					}
					else
					{
						this._WaybillID = default(string);
					}
					this.SendPropertyChanged("Waybills");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Expenses(Expenses entity)
		{
			this.SendPropertyChanging();
			entity.Sortings = this;
		}
		
		private void detach_Expenses(Expenses entity)
		{
			this.SendPropertyChanging();
			entity.Sortings = null;
		}
		
		private void attach_FlowStorages(FlowStorages entity)
		{
			this.SendPropertyChanging();
			entity.Sortings = this;
		}
		
		private void detach_FlowStorages(FlowStorages entity)
		{
			this.SendPropertyChanging();
			entity.Sortings = null;
		}
		
		private void attach_StroeStorages(StroeStorages entity)
		{
			this.SendPropertyChanging();
			entity.Sortings = this;
		}
		
		private void detach_StroeStorages(StroeStorages entity)
		{
			this.SendPropertyChanging();
			entity.Sortings = null;
		}
		
		private void attach_TransferItems(TransferItems entity)
		{
			this.SendPropertyChanging();
			entity.Sortings = this;
		}
		
		private void detach_TransferItems(TransferItems entity)
		{
			this.SendPropertyChanging();
			entity.Sortings = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.StandardProducts")]
	public partial class StandardProducts : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _ID;
		
		private string _Name;
		
		private string _ManufacturerID;
		
		private string _PackageCase;
		
		private string _Packaging;
		
		private string _Batch;
		
		private string _DateCode;
		
		private string _Description;
		
		private string _Origin;
		
		private EntitySet<EntryNotices> _EntryNotices;
		
		private EntitySet<FlowStorages> _FlowStorages;
		
		private EntitySet<Inputs> _Inputs;
		
		private EntitySet<Sortings> _Sortings;
		
		private EntitySet<StroeStorages> _StroeStorages;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(string value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnManufacturerIDChanging(string value);
    partial void OnManufacturerIDChanged();
    partial void OnPackageCaseChanging(string value);
    partial void OnPackageCaseChanged();
    partial void OnPackagingChanging(string value);
    partial void OnPackagingChanged();
    partial void OnBatchChanging(string value);
    partial void OnBatchChanged();
    partial void OnDateCodeChanging(string value);
    partial void OnDateCodeChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnOriginChanging(string value);
    partial void OnOriginChanged();
    #endregion
		
		public StandardProducts()
		{
			this._EntryNotices = new EntitySet<EntryNotices>(new Action<EntryNotices>(this.attach_EntryNotices), new Action<EntryNotices>(this.detach_EntryNotices));
			this._FlowStorages = new EntitySet<FlowStorages>(new Action<FlowStorages>(this.attach_FlowStorages), new Action<FlowStorages>(this.detach_FlowStorages));
			this._Inputs = new EntitySet<Inputs>(new Action<Inputs>(this.attach_Inputs), new Action<Inputs>(this.detach_Inputs));
			this._Sortings = new EntitySet<Sortings>(new Action<Sortings>(this.attach_Sortings), new Action<Sortings>(this.detach_Sortings));
			this._StroeStorages = new EntitySet<StroeStorages>(new Action<StroeStorages>(this.attach_StroeStorages), new Action<StroeStorages>(this.detach_StroeStorages));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(150) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ManufacturerID", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string ManufacturerID
		{
			get
			{
				return this._ManufacturerID;
			}
			set
			{
				if ((this._ManufacturerID != value))
				{
					this.OnManufacturerIDChanging(value);
					this.SendPropertyChanging();
					this._ManufacturerID = value;
					this.SendPropertyChanged("ManufacturerID");
					this.OnManufacturerIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PackageCase", DbType="NVarChar(150) NOT NULL", CanBeNull=false)]
		public string PackageCase
		{
			get
			{
				return this._PackageCase;
			}
			set
			{
				if ((this._PackageCase != value))
				{
					this.OnPackageCaseChanging(value);
					this.SendPropertyChanging();
					this._PackageCase = value;
					this.SendPropertyChanged("PackageCase");
					this.OnPackageCaseChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Packaging", DbType="NVarChar(150) NOT NULL", CanBeNull=false)]
		public string Packaging
		{
			get
			{
				return this._Packaging;
			}
			set
			{
				if ((this._Packaging != value))
				{
					this.OnPackagingChanging(value);
					this.SendPropertyChanging();
					this._Packaging = value;
					this.SendPropertyChanged("Packaging");
					this.OnPackagingChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Batch", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Batch
		{
			get
			{
				return this._Batch;
			}
			set
			{
				if ((this._Batch != value))
				{
					this.OnBatchChanging(value);
					this.SendPropertyChanging();
					this._Batch = value;
					this.SendPropertyChanged("Batch");
					this.OnBatchChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateCode", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string DateCode
		{
			get
			{
				return this._DateCode;
			}
			set
			{
				if ((this._DateCode != value))
				{
					this.OnDateCodeChanging(value);
					this.SendPropertyChanging();
					this._DateCode = value;
					this.SendPropertyChanged("DateCode");
					this.OnDateCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(300) NOT NULL", CanBeNull=false)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Origin", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Origin
		{
			get
			{
				return this._Origin;
			}
			set
			{
				if ((this._Origin != value))
				{
					this.OnOriginChanging(value);
					this.SendPropertyChanging();
					this._Origin = value;
					this.SendPropertyChanged("Origin");
					this.OnOriginChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="StandardProducts_EntryNotices", Storage="_EntryNotices", ThisKey="ID", OtherKey="ProductID")]
		public EntitySet<EntryNotices> EntryNotices
		{
			get
			{
				return this._EntryNotices;
			}
			set
			{
				this._EntryNotices.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="StandardProducts_FlowStorages", Storage="_FlowStorages", ThisKey="ID", OtherKey="ProductID")]
		public EntitySet<FlowStorages> FlowStorages
		{
			get
			{
				return this._FlowStorages;
			}
			set
			{
				this._FlowStorages.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="StandardProducts_Inputs", Storage="_Inputs", ThisKey="ID", OtherKey="ProductID")]
		public EntitySet<Inputs> Inputs
		{
			get
			{
				return this._Inputs;
			}
			set
			{
				this._Inputs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="StandardProducts_Sortings", Storage="_Sortings", ThisKey="ID", OtherKey="ProductID")]
		public EntitySet<Sortings> Sortings
		{
			get
			{
				return this._Sortings;
			}
			set
			{
				this._Sortings.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="StandardProducts_StroeStorages", Storage="_StroeStorages", ThisKey="ID", OtherKey="ProductID")]
		public EntitySet<StroeStorages> StroeStorages
		{
			get
			{
				return this._StroeStorages;
			}
			set
			{
				this._StroeStorages.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_EntryNotices(EntryNotices entity)
		{
			this.SendPropertyChanging();
			entity.StandardProducts = this;
		}
		
		private void detach_EntryNotices(EntryNotices entity)
		{
			this.SendPropertyChanging();
			entity.StandardProducts = null;
		}
		
		private void attach_FlowStorages(FlowStorages entity)
		{
			this.SendPropertyChanging();
			entity.StandardProducts = this;
		}
		
		private void detach_FlowStorages(FlowStorages entity)
		{
			this.SendPropertyChanging();
			entity.StandardProducts = null;
		}
		
		private void attach_Inputs(Inputs entity)
		{
			this.SendPropertyChanging();
			entity.StandardProducts = this;
		}
		
		private void detach_Inputs(Inputs entity)
		{
			this.SendPropertyChanging();
			entity.StandardProducts = null;
		}
		
		private void attach_Sortings(Sortings entity)
		{
			this.SendPropertyChanging();
			entity.StandardProducts = this;
		}
		
		private void detach_Sortings(Sortings entity)
		{
			this.SendPropertyChanging();
			entity.StandardProducts = null;
		}
		
		private void attach_StroeStorages(StroeStorages entity)
		{
			this.SendPropertyChanging();
			entity.StandardProducts = this;
		}
		
		private void detach_StroeStorages(StroeStorages entity)
		{
			this.SendPropertyChanging();
			entity.StandardProducts = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Stocks")]
	public partial class Stocks : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _ID;
		
		private string _Code;
		
		private int _Type;
		
		private EntitySet<Shelves> _Shelves;
		
		private EntitySet<Stocks> _Stocks2;
		
		private EntityRef<Stocks> _Stocks1;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(string value);
    partial void OnIDChanged();
    partial void OnCodeChanging(string value);
    partial void OnCodeChanged();
    partial void OnTypeChanging(int value);
    partial void OnTypeChanged();
    #endregion
		
		public Stocks()
		{
			this._Shelves = new EntitySet<Shelves>(new Action<Shelves>(this.attach_Shelves), new Action<Shelves>(this.detach_Shelves));
			this._Stocks2 = new EntitySet<Stocks>(new Action<Stocks>(this.attach_Stocks2), new Action<Stocks>(this.detach_Stocks2));
			this._Stocks1 = default(EntityRef<Stocks>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Code", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Code
		{
			get
			{
				return this._Code;
			}
			set
			{
				if ((this._Code != value))
				{
					if (this._Stocks1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCodeChanging(value);
					this.SendPropertyChanging();
					this._Code = value;
					this.SendPropertyChanged("Code");
					this.OnCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type", DbType="Int NOT NULL")]
		public int Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Stocks_Shelves", Storage="_Shelves", ThisKey="ID", OtherKey="StockID")]
		public EntitySet<Shelves> Shelves
		{
			get
			{
				return this._Shelves;
			}
			set
			{
				this._Shelves.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Stocks_Stocks", Storage="_Stocks2", ThisKey="ID", OtherKey="Code")]
		public EntitySet<Stocks> Stocks2
		{
			get
			{
				return this._Stocks2;
			}
			set
			{
				this._Stocks2.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Stocks_Stocks", Storage="_Stocks1", ThisKey="Code", OtherKey="ID", IsForeignKey=true)]
		public Stocks Stocks1
		{
			get
			{
				return this._Stocks1.Entity;
			}
			set
			{
				Stocks previousValue = this._Stocks1.Entity;
				if (((previousValue != value) 
							|| (this._Stocks1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Stocks1.Entity = null;
						previousValue.Stocks2.Remove(this);
					}
					this._Stocks1.Entity = value;
					if ((value != null))
					{
						value.Stocks2.Add(this);
						this._Code = value.ID;
					}
					else
					{
						this._Code = default(string);
					}
					this.SendPropertyChanged("Stocks1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Shelves(Shelves entity)
		{
			this.SendPropertyChanging();
			entity.Stocks = this;
		}
		
		private void detach_Shelves(Shelves entity)
		{
			this.SendPropertyChanging();
			entity.Stocks = null;
		}
		
		private void attach_Stocks2(Stocks entity)
		{
			this.SendPropertyChanging();
			entity.Stocks1 = this;
		}
		
		private void detach_Stocks2(Stocks entity)
		{
			this.SendPropertyChanging();
			entity.Stocks1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.StroeStorages")]
	public partial class StroeStorages : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _ID;
		
		private string _SortingID;
		
		private string _PickingID;
		
		private string _InputID;
		
		private string _InApplyID;
		
		private int _Purpose;
		
		private System.Nullable<int> _Quantity;
		
		private string _ProductID;
		
		private System.DateTime _CreateDate;
		
		private System.DateTime _UpdateDate;
		
		private int _Status;
		
		private string _Summary;
		
		private string _ShelveID;
		
		private EntitySet<Forms> _Forms;
		
		private EntitySet<Pickings> _Pickings;
		
		private EntityRef<Pickings> _Pickings1;
		
		private EntityRef<Shelves> _Shelves;
		
		private EntityRef<Sortings> _Sortings;
		
		private EntityRef<StandardProducts> _StandardProducts;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(string value);
    partial void OnIDChanged();
    partial void OnSortingIDChanging(string value);
    partial void OnSortingIDChanged();
    partial void OnPickingIDChanging(string value);
    partial void OnPickingIDChanged();
    partial void OnInputIDChanging(string value);
    partial void OnInputIDChanged();
    partial void OnInApplyIDChanging(string value);
    partial void OnInApplyIDChanged();
    partial void OnPurposeChanging(int value);
    partial void OnPurposeChanged();
    partial void OnQuantityChanging(System.Nullable<int> value);
    partial void OnQuantityChanged();
    partial void OnProductIDChanging(string value);
    partial void OnProductIDChanged();
    partial void OnCreateDateChanging(System.DateTime value);
    partial void OnCreateDateChanged();
    partial void OnUpdateDateChanging(System.DateTime value);
    partial void OnUpdateDateChanged();
    partial void OnStatusChanging(int value);
    partial void OnStatusChanged();
    partial void OnSummaryChanging(string value);
    partial void OnSummaryChanged();
    partial void OnShelveIDChanging(string value);
    partial void OnShelveIDChanged();
    #endregion
		
		public StroeStorages()
		{
			this._Forms = new EntitySet<Forms>(new Action<Forms>(this.attach_Forms), new Action<Forms>(this.detach_Forms));
			this._Pickings = new EntitySet<Pickings>(new Action<Pickings>(this.attach_Pickings), new Action<Pickings>(this.detach_Pickings));
			this._Pickings1 = default(EntityRef<Pickings>);
			this._Shelves = default(EntityRef<Shelves>);
			this._Sortings = default(EntityRef<Sortings>);
			this._StandardProducts = default(EntityRef<StandardProducts>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SortingID", DbType="VarChar(50)")]
		public string SortingID
		{
			get
			{
				return this._SortingID;
			}
			set
			{
				if ((this._SortingID != value))
				{
					if (this._Sortings.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSortingIDChanging(value);
					this.SendPropertyChanging();
					this._SortingID = value;
					this.SendPropertyChanged("SortingID");
					this.OnSortingIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PickingID", DbType="VarChar(50)")]
		public string PickingID
		{
			get
			{
				return this._PickingID;
			}
			set
			{
				if ((this._PickingID != value))
				{
					if (this._Pickings1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPickingIDChanging(value);
					this.SendPropertyChanging();
					this._PickingID = value;
					this.SendPropertyChanged("PickingID");
					this.OnPickingIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InputID", DbType="VarChar(50)")]
		public string InputID
		{
			get
			{
				return this._InputID;
			}
			set
			{
				if ((this._InputID != value))
				{
					this.OnInputIDChanging(value);
					this.SendPropertyChanging();
					this._InputID = value;
					this.SendPropertyChanged("InputID");
					this.OnInputIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InApplyID", DbType="VarChar(50)")]
		public string InApplyID
		{
			get
			{
				return this._InApplyID;
			}
			set
			{
				if ((this._InApplyID != value))
				{
					this.OnInApplyIDChanging(value);
					this.SendPropertyChanging();
					this._InApplyID = value;
					this.SendPropertyChanged("InApplyID");
					this.OnInApplyIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Purpose", DbType="Int NOT NULL")]
		public int Purpose
		{
			get
			{
				return this._Purpose;
			}
			set
			{
				if ((this._Purpose != value))
				{
					this.OnPurposeChanging(value);
					this.SendPropertyChanging();
					this._Purpose = value;
					this.SendPropertyChanged("Purpose");
					this.OnPurposeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Quantity", DbType="Int")]
		public System.Nullable<int> Quantity
		{
			get
			{
				return this._Quantity;
			}
			set
			{
				if ((this._Quantity != value))
				{
					this.OnQuantityChanging(value);
					this.SendPropertyChanging();
					this._Quantity = value;
					this.SendPropertyChanged("Quantity");
					this.OnQuantityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductID", DbType="VarChar(50)")]
		public string ProductID
		{
			get
			{
				return this._ProductID;
			}
			set
			{
				if ((this._ProductID != value))
				{
					if (this._StandardProducts.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProductIDChanging(value);
					this.SendPropertyChanging();
					this._ProductID = value;
					this.SendPropertyChanged("ProductID");
					this.OnProductIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreateDate", DbType="DateTime NOT NULL")]
		public System.DateTime CreateDate
		{
			get
			{
				return this._CreateDate;
			}
			set
			{
				if ((this._CreateDate != value))
				{
					this.OnCreateDateChanging(value);
					this.SendPropertyChanging();
					this._CreateDate = value;
					this.SendPropertyChanged("CreateDate");
					this.OnCreateDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UpdateDate", DbType="DateTime NOT NULL")]
		public System.DateTime UpdateDate
		{
			get
			{
				return this._UpdateDate;
			}
			set
			{
				if ((this._UpdateDate != value))
				{
					this.OnUpdateDateChanging(value);
					this.SendPropertyChanging();
					this._UpdateDate = value;
					this.SendPropertyChanged("UpdateDate");
					this.OnUpdateDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="Int NOT NULL")]
		public int Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Summary", DbType="NVarChar(100)")]
		public string Summary
		{
			get
			{
				return this._Summary;
			}
			set
			{
				if ((this._Summary != value))
				{
					this.OnSummaryChanging(value);
					this.SendPropertyChanging();
					this._Summary = value;
					this.SendPropertyChanged("Summary");
					this.OnSummaryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ShelveID", DbType="VarChar(50)")]
		public string ShelveID
		{
			get
			{
				return this._ShelveID;
			}
			set
			{
				if ((this._ShelveID != value))
				{
					if (this._Shelves.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnShelveIDChanging(value);
					this.SendPropertyChanging();
					this._ShelveID = value;
					this.SendPropertyChanged("ShelveID");
					this.OnShelveIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="StroeStorages_Forms", Storage="_Forms", ThisKey="ID", OtherKey="StroeID")]
		public EntitySet<Forms> Forms
		{
			get
			{
				return this._Forms;
			}
			set
			{
				this._Forms.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="StroeStorages_Pickings", Storage="_Pickings", ThisKey="ID", OtherKey="StroeSorageID")]
		public EntitySet<Pickings> Pickings
		{
			get
			{
				return this._Pickings;
			}
			set
			{
				this._Pickings.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Pickings_StroeStorages", Storage="_Pickings1", ThisKey="PickingID", OtherKey="ID", IsForeignKey=true)]
		public Pickings Pickings1
		{
			get
			{
				return this._Pickings1.Entity;
			}
			set
			{
				Pickings previousValue = this._Pickings1.Entity;
				if (((previousValue != value) 
							|| (this._Pickings1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Pickings1.Entity = null;
						previousValue.StroeStorages1.Remove(this);
					}
					this._Pickings1.Entity = value;
					if ((value != null))
					{
						value.StroeStorages1.Add(this);
						this._PickingID = value.ID;
					}
					else
					{
						this._PickingID = default(string);
					}
					this.SendPropertyChanged("Pickings1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Shelves_StroeStorages", Storage="_Shelves", ThisKey="ShelveID", OtherKey="ID", IsForeignKey=true)]
		public Shelves Shelves
		{
			get
			{
				return this._Shelves.Entity;
			}
			set
			{
				Shelves previousValue = this._Shelves.Entity;
				if (((previousValue != value) 
							|| (this._Shelves.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Shelves.Entity = null;
						previousValue.StroeStorages.Remove(this);
					}
					this._Shelves.Entity = value;
					if ((value != null))
					{
						value.StroeStorages.Add(this);
						this._ShelveID = value.ID;
					}
					else
					{
						this._ShelveID = default(string);
					}
					this.SendPropertyChanged("Shelves");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Sortings_StroeStorages", Storage="_Sortings", ThisKey="SortingID", OtherKey="ID", IsForeignKey=true)]
		public Sortings Sortings
		{
			get
			{
				return this._Sortings.Entity;
			}
			set
			{
				Sortings previousValue = this._Sortings.Entity;
				if (((previousValue != value) 
							|| (this._Sortings.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Sortings.Entity = null;
						previousValue.StroeStorages.Remove(this);
					}
					this._Sortings.Entity = value;
					if ((value != null))
					{
						value.StroeStorages.Add(this);
						this._SortingID = value.ID;
					}
					else
					{
						this._SortingID = default(string);
					}
					this.SendPropertyChanged("Sortings");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="StandardProducts_StroeStorages", Storage="_StandardProducts", ThisKey="ProductID", OtherKey="ID", IsForeignKey=true)]
		public StandardProducts StandardProducts
		{
			get
			{
				return this._StandardProducts.Entity;
			}
			set
			{
				StandardProducts previousValue = this._StandardProducts.Entity;
				if (((previousValue != value) 
							|| (this._StandardProducts.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._StandardProducts.Entity = null;
						previousValue.StroeStorages.Remove(this);
					}
					this._StandardProducts.Entity = value;
					if ((value != null))
					{
						value.StroeStorages.Add(this);
						this._ProductID = value.ID;
					}
					else
					{
						this._ProductID = default(string);
					}
					this.SendPropertyChanged("StandardProducts");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Forms(Forms entity)
		{
			this.SendPropertyChanging();
			entity.StroeStorages = this;
		}
		
		private void detach_Forms(Forms entity)
		{
			this.SendPropertyChanging();
			entity.StroeStorages = null;
		}
		
		private void attach_Pickings(Pickings entity)
		{
			this.SendPropertyChanging();
			entity.StroeStorages = this;
		}
		
		private void detach_Pickings(Pickings entity)
		{
			this.SendPropertyChanging();
			entity.StroeStorages = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TransferItems")]
	public partial class TransferItems : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _ID;
		
		private string _TransferID;
		
		private string _SortingID;
		
		private string _PickingID;
		
		private string _InputID;
		
		private string _InApplyID;
		
		private System.Nullable<int> _Quantity;
		
		private string _ProductID;
		
		private System.DateTime _CreateDate;
		
		private string _StepID;
		
		private EntityRef<Pickings> _Pickings;
		
		private EntityRef<Sortings> _Sortings;
		
		private EntityRef<Transfers> _Transfers;
		
		private EntityRef<TransferSteps> _TransferSteps;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(string value);
    partial void OnIDChanged();
    partial void OnTransferIDChanging(string value);
    partial void OnTransferIDChanged();
    partial void OnSortingIDChanging(string value);
    partial void OnSortingIDChanged();
    partial void OnPickingIDChanging(string value);
    partial void OnPickingIDChanged();
    partial void OnInputIDChanging(string value);
    partial void OnInputIDChanged();
    partial void OnInApplyIDChanging(string value);
    partial void OnInApplyIDChanged();
    partial void OnQuantityChanging(System.Nullable<int> value);
    partial void OnQuantityChanged();
    partial void OnProductIDChanging(string value);
    partial void OnProductIDChanged();
    partial void OnCreateDateChanging(System.DateTime value);
    partial void OnCreateDateChanged();
    partial void OnStepIDChanging(string value);
    partial void OnStepIDChanged();
    #endregion
		
		public TransferItems()
		{
			this._Pickings = default(EntityRef<Pickings>);
			this._Sortings = default(EntityRef<Sortings>);
			this._Transfers = default(EntityRef<Transfers>);
			this._TransferSteps = default(EntityRef<TransferSteps>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TransferID", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string TransferID
		{
			get
			{
				return this._TransferID;
			}
			set
			{
				if ((this._TransferID != value))
				{
					if (this._Transfers.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTransferIDChanging(value);
					this.SendPropertyChanging();
					this._TransferID = value;
					this.SendPropertyChanged("TransferID");
					this.OnTransferIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SortingID", DbType="VarChar(50)")]
		public string SortingID
		{
			get
			{
				return this._SortingID;
			}
			set
			{
				if ((this._SortingID != value))
				{
					if (this._Sortings.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSortingIDChanging(value);
					this.SendPropertyChanging();
					this._SortingID = value;
					this.SendPropertyChanged("SortingID");
					this.OnSortingIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PickingID", DbType="VarChar(50)")]
		public string PickingID
		{
			get
			{
				return this._PickingID;
			}
			set
			{
				if ((this._PickingID != value))
				{
					if (this._Pickings.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPickingIDChanging(value);
					this.SendPropertyChanging();
					this._PickingID = value;
					this.SendPropertyChanged("PickingID");
					this.OnPickingIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InputID", DbType="VarChar(50)")]
		public string InputID
		{
			get
			{
				return this._InputID;
			}
			set
			{
				if ((this._InputID != value))
				{
					this.OnInputIDChanging(value);
					this.SendPropertyChanging();
					this._InputID = value;
					this.SendPropertyChanged("InputID");
					this.OnInputIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InApplyID", DbType="VarChar(50)")]
		public string InApplyID
		{
			get
			{
				return this._InApplyID;
			}
			set
			{
				if ((this._InApplyID != value))
				{
					this.OnInApplyIDChanging(value);
					this.SendPropertyChanging();
					this._InApplyID = value;
					this.SendPropertyChanged("InApplyID");
					this.OnInApplyIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Quantity", DbType="Int")]
		public System.Nullable<int> Quantity
		{
			get
			{
				return this._Quantity;
			}
			set
			{
				if ((this._Quantity != value))
				{
					this.OnQuantityChanging(value);
					this.SendPropertyChanging();
					this._Quantity = value;
					this.SendPropertyChanged("Quantity");
					this.OnQuantityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductID", DbType="VarChar(50)")]
		public string ProductID
		{
			get
			{
				return this._ProductID;
			}
			set
			{
				if ((this._ProductID != value))
				{
					this.OnProductIDChanging(value);
					this.SendPropertyChanging();
					this._ProductID = value;
					this.SendPropertyChanged("ProductID");
					this.OnProductIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreateDate", DbType="DateTime NOT NULL")]
		public System.DateTime CreateDate
		{
			get
			{
				return this._CreateDate;
			}
			set
			{
				if ((this._CreateDate != value))
				{
					this.OnCreateDateChanging(value);
					this.SendPropertyChanging();
					this._CreateDate = value;
					this.SendPropertyChanged("CreateDate");
					this.OnCreateDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StepID", DbType="VarChar(50)")]
		public string StepID
		{
			get
			{
				return this._StepID;
			}
			set
			{
				if ((this._StepID != value))
				{
					if (this._TransferSteps.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStepIDChanging(value);
					this.SendPropertyChanging();
					this._StepID = value;
					this.SendPropertyChanged("StepID");
					this.OnStepIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Pickings_TransferItems", Storage="_Pickings", ThisKey="PickingID", OtherKey="ID", IsForeignKey=true)]
		public Pickings Pickings
		{
			get
			{
				return this._Pickings.Entity;
			}
			set
			{
				Pickings previousValue = this._Pickings.Entity;
				if (((previousValue != value) 
							|| (this._Pickings.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Pickings.Entity = null;
						previousValue.TransferItems.Remove(this);
					}
					this._Pickings.Entity = value;
					if ((value != null))
					{
						value.TransferItems.Add(this);
						this._PickingID = value.ID;
					}
					else
					{
						this._PickingID = default(string);
					}
					this.SendPropertyChanged("Pickings");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Sortings_TransferItems", Storage="_Sortings", ThisKey="SortingID", OtherKey="ID", IsForeignKey=true)]
		public Sortings Sortings
		{
			get
			{
				return this._Sortings.Entity;
			}
			set
			{
				Sortings previousValue = this._Sortings.Entity;
				if (((previousValue != value) 
							|| (this._Sortings.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Sortings.Entity = null;
						previousValue.TransferItems.Remove(this);
					}
					this._Sortings.Entity = value;
					if ((value != null))
					{
						value.TransferItems.Add(this);
						this._SortingID = value.ID;
					}
					else
					{
						this._SortingID = default(string);
					}
					this.SendPropertyChanged("Sortings");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Transfers_TransferItems", Storage="_Transfers", ThisKey="TransferID", OtherKey="ID", IsForeignKey=true)]
		public Transfers Transfers
		{
			get
			{
				return this._Transfers.Entity;
			}
			set
			{
				Transfers previousValue = this._Transfers.Entity;
				if (((previousValue != value) 
							|| (this._Transfers.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Transfers.Entity = null;
						previousValue.TransferItems.Remove(this);
					}
					this._Transfers.Entity = value;
					if ((value != null))
					{
						value.TransferItems.Add(this);
						this._TransferID = value.ID;
					}
					else
					{
						this._TransferID = default(string);
					}
					this.SendPropertyChanged("Transfers");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TransferSteps_TransferItems", Storage="_TransferSteps", ThisKey="StepID", OtherKey="ID", IsForeignKey=true)]
		public TransferSteps TransferSteps
		{
			get
			{
				return this._TransferSteps.Entity;
			}
			set
			{
				TransferSteps previousValue = this._TransferSteps.Entity;
				if (((previousValue != value) 
							|| (this._TransferSteps.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TransferSteps.Entity = null;
						previousValue.TransferItems.Remove(this);
					}
					this._TransferSteps.Entity = value;
					if ((value != null))
					{
						value.TransferItems.Add(this);
						this._StepID = value.ID;
					}
					else
					{
						this._StepID = default(string);
					}
					this.SendPropertyChanged("TransferSteps");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Transfers")]
	public partial class Transfers : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _ID;
		
		private string _AdminID;
		
		private System.DateTime _CreateDate;
		
		private System.DateTime _UpdateDate;
		
		private int _Status;
		
		private string _Summary;
		
		private EntitySet<TransferItems> _TransferItems;
		
		private EntitySet<TransferSteps> _TransferSteps;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(string value);
    partial void OnIDChanged();
    partial void OnAdminIDChanging(string value);
    partial void OnAdminIDChanged();
    partial void OnCreateDateChanging(System.DateTime value);
    partial void OnCreateDateChanged();
    partial void OnUpdateDateChanging(System.DateTime value);
    partial void OnUpdateDateChanged();
    partial void OnStatusChanging(int value);
    partial void OnStatusChanged();
    partial void OnSummaryChanging(string value);
    partial void OnSummaryChanged();
    #endregion
		
		public Transfers()
		{
			this._TransferItems = new EntitySet<TransferItems>(new Action<TransferItems>(this.attach_TransferItems), new Action<TransferItems>(this.detach_TransferItems));
			this._TransferSteps = new EntitySet<TransferSteps>(new Action<TransferSteps>(this.attach_TransferSteps), new Action<TransferSteps>(this.detach_TransferSteps));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AdminID", DbType="VarChar(50)")]
		public string AdminID
		{
			get
			{
				return this._AdminID;
			}
			set
			{
				if ((this._AdminID != value))
				{
					this.OnAdminIDChanging(value);
					this.SendPropertyChanging();
					this._AdminID = value;
					this.SendPropertyChanged("AdminID");
					this.OnAdminIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreateDate", DbType="DateTime NOT NULL")]
		public System.DateTime CreateDate
		{
			get
			{
				return this._CreateDate;
			}
			set
			{
				if ((this._CreateDate != value))
				{
					this.OnCreateDateChanging(value);
					this.SendPropertyChanging();
					this._CreateDate = value;
					this.SendPropertyChanged("CreateDate");
					this.OnCreateDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UpdateDate", DbType="DateTime NOT NULL")]
		public System.DateTime UpdateDate
		{
			get
			{
				return this._UpdateDate;
			}
			set
			{
				if ((this._UpdateDate != value))
				{
					this.OnUpdateDateChanging(value);
					this.SendPropertyChanging();
					this._UpdateDate = value;
					this.SendPropertyChanged("UpdateDate");
					this.OnUpdateDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="Int NOT NULL")]
		public int Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Summary", DbType="NVarChar(100)")]
		public string Summary
		{
			get
			{
				return this._Summary;
			}
			set
			{
				if ((this._Summary != value))
				{
					this.OnSummaryChanging(value);
					this.SendPropertyChanging();
					this._Summary = value;
					this.SendPropertyChanged("Summary");
					this.OnSummaryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Transfers_TransferItems", Storage="_TransferItems", ThisKey="ID", OtherKey="TransferID")]
		public EntitySet<TransferItems> TransferItems
		{
			get
			{
				return this._TransferItems;
			}
			set
			{
				this._TransferItems.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Transfers_TransferSteps", Storage="_TransferSteps", ThisKey="ID", OtherKey="TransferID")]
		public EntitySet<TransferSteps> TransferSteps
		{
			get
			{
				return this._TransferSteps;
			}
			set
			{
				this._TransferSteps.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_TransferItems(TransferItems entity)
		{
			this.SendPropertyChanging();
			entity.Transfers = this;
		}
		
		private void detach_TransferItems(TransferItems entity)
		{
			this.SendPropertyChanging();
			entity.Transfers = null;
		}
		
		private void attach_TransferSteps(TransferSteps entity)
		{
			this.SendPropertyChanging();
			entity.Transfers = this;
		}
		
		private void detach_TransferSteps(TransferSteps entity)
		{
			this.SendPropertyChanging();
			entity.Transfers = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TransferSteps")]
	public partial class TransferSteps : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _ID;
		
		private string _TransferID;
		
		private string _FromWareID;
		
		private string _ToWareID;
		
		private int _Status;
		
		private string _WaybillID;
		
		private EntitySet<TransferItems> _TransferItems;
		
		private EntityRef<Transfers> _Transfers;
		
		private EntityRef<Waybills> _Waybills;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(string value);
    partial void OnIDChanged();
    partial void OnTransferIDChanging(string value);
    partial void OnTransferIDChanged();
    partial void OnFromWareIDChanging(string value);
    partial void OnFromWareIDChanged();
    partial void OnToWareIDChanging(string value);
    partial void OnToWareIDChanged();
    partial void OnStatusChanging(int value);
    partial void OnStatusChanged();
    partial void OnWaybillIDChanging(string value);
    partial void OnWaybillIDChanged();
    #endregion
		
		public TransferSteps()
		{
			this._TransferItems = new EntitySet<TransferItems>(new Action<TransferItems>(this.attach_TransferItems), new Action<TransferItems>(this.detach_TransferItems));
			this._Transfers = default(EntityRef<Transfers>);
			this._Waybills = default(EntityRef<Waybills>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TransferID", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string TransferID
		{
			get
			{
				return this._TransferID;
			}
			set
			{
				if ((this._TransferID != value))
				{
					if (this._Transfers.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTransferIDChanging(value);
					this.SendPropertyChanging();
					this._TransferID = value;
					this.SendPropertyChanged("TransferID");
					this.OnTransferIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FromWareID", DbType="VarChar(50)")]
		public string FromWareID
		{
			get
			{
				return this._FromWareID;
			}
			set
			{
				if ((this._FromWareID != value))
				{
					this.OnFromWareIDChanging(value);
					this.SendPropertyChanging();
					this._FromWareID = value;
					this.SendPropertyChanged("FromWareID");
					this.OnFromWareIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ToWareID", DbType="VarChar(50)")]
		public string ToWareID
		{
			get
			{
				return this._ToWareID;
			}
			set
			{
				if ((this._ToWareID != value))
				{
					this.OnToWareIDChanging(value);
					this.SendPropertyChanging();
					this._ToWareID = value;
					this.SendPropertyChanged("ToWareID");
					this.OnToWareIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="Int NOT NULL")]
		public int Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WaybillID", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string WaybillID
		{
			get
			{
				return this._WaybillID;
			}
			set
			{
				if ((this._WaybillID != value))
				{
					if (this._Waybills.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnWaybillIDChanging(value);
					this.SendPropertyChanging();
					this._WaybillID = value;
					this.SendPropertyChanged("WaybillID");
					this.OnWaybillIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TransferSteps_TransferItems", Storage="_TransferItems", ThisKey="ID", OtherKey="StepID")]
		public EntitySet<TransferItems> TransferItems
		{
			get
			{
				return this._TransferItems;
			}
			set
			{
				this._TransferItems.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Transfers_TransferSteps", Storage="_Transfers", ThisKey="TransferID", OtherKey="ID", IsForeignKey=true)]
		public Transfers Transfers
		{
			get
			{
				return this._Transfers.Entity;
			}
			set
			{
				Transfers previousValue = this._Transfers.Entity;
				if (((previousValue != value) 
							|| (this._Transfers.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Transfers.Entity = null;
						previousValue.TransferSteps.Remove(this);
					}
					this._Transfers.Entity = value;
					if ((value != null))
					{
						value.TransferSteps.Add(this);
						this._TransferID = value.ID;
					}
					else
					{
						this._TransferID = default(string);
					}
					this.SendPropertyChanged("Transfers");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Waybills_TransferSteps", Storage="_Waybills", ThisKey="WaybillID", OtherKey="ID", IsForeignKey=true)]
		public Waybills Waybills
		{
			get
			{
				return this._Waybills.Entity;
			}
			set
			{
				Waybills previousValue = this._Waybills.Entity;
				if (((previousValue != value) 
							|| (this._Waybills.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Waybills.Entity = null;
						previousValue.TransferSteps.Remove(this);
					}
					this._Waybills.Entity = value;
					if ((value != null))
					{
						value.TransferSteps.Add(this);
						this._WaybillID = value.ID;
					}
					else
					{
						this._WaybillID = default(string);
					}
					this.SendPropertyChanged("Waybills");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_TransferItems(TransferItems entity)
		{
			this.SendPropertyChanging();
			entity.TransferSteps = this;
		}
		
		private void detach_TransferItems(TransferItems entity)
		{
			this.SendPropertyChanging();
			entity.TransferSteps = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TransportTerms")]
	public partial class TransportTerms : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _ID;
		
		private int _Type;
		
		private int _TransportMode;
		
		private int _FreightMode;
		
		private int _PriceClause;
		
		private string _Carrier;
		
		private string _Origin;
		
		private string _Destination;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(string value);
    partial void OnIDChanged();
    partial void OnTypeChanging(int value);
    partial void OnTypeChanged();
    partial void OnTransportModeChanging(int value);
    partial void OnTransportModeChanged();
    partial void OnFreightModeChanging(int value);
    partial void OnFreightModeChanged();
    partial void OnPriceClauseChanging(int value);
    partial void OnPriceClauseChanged();
    partial void OnCarrierChanging(string value);
    partial void OnCarrierChanged();
    partial void OnOriginChanging(string value);
    partial void OnOriginChanged();
    partial void OnDestinationChanging(string value);
    partial void OnDestinationChanged();
    #endregion
		
		public TransportTerms()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type", DbType="Int NOT NULL")]
		public int Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TransportMode", DbType="Int NOT NULL")]
		public int TransportMode
		{
			get
			{
				return this._TransportMode;
			}
			set
			{
				if ((this._TransportMode != value))
				{
					this.OnTransportModeChanging(value);
					this.SendPropertyChanging();
					this._TransportMode = value;
					this.SendPropertyChanged("TransportMode");
					this.OnTransportModeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FreightMode", DbType="Int NOT NULL")]
		public int FreightMode
		{
			get
			{
				return this._FreightMode;
			}
			set
			{
				if ((this._FreightMode != value))
				{
					this.OnFreightModeChanging(value);
					this.SendPropertyChanging();
					this._FreightMode = value;
					this.SendPropertyChanged("FreightMode");
					this.OnFreightModeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PriceClause", DbType="Int NOT NULL")]
		public int PriceClause
		{
			get
			{
				return this._PriceClause;
			}
			set
			{
				if ((this._PriceClause != value))
				{
					this.OnPriceClauseChanging(value);
					this.SendPropertyChanging();
					this._PriceClause = value;
					this.SendPropertyChanged("PriceClause");
					this.OnPriceClauseChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Carrier", DbType="VarChar(200) NOT NULL", CanBeNull=false)]
		public string Carrier
		{
			get
			{
				return this._Carrier;
			}
			set
			{
				if ((this._Carrier != value))
				{
					this.OnCarrierChanging(value);
					this.SendPropertyChanging();
					this._Carrier = value;
					this.SendPropertyChanged("Carrier");
					this.OnCarrierChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Origin", DbType="VarChar(200) NOT NULL", CanBeNull=false)]
		public string Origin
		{
			get
			{
				return this._Origin;
			}
			set
			{
				if ((this._Origin != value))
				{
					this.OnOriginChanging(value);
					this.SendPropertyChanging();
					this._Origin = value;
					this.SendPropertyChanged("Origin");
					this.OnOriginChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Destination", DbType="VarChar(200) NOT NULL", CanBeNull=false)]
		public string Destination
		{
			get
			{
				return this._Destination;
			}
			set
			{
				if ((this._Destination != value))
				{
					this.OnDestinationChanging(value);
					this.SendPropertyChanging();
					this._Destination = value;
					this.SendPropertyChanged("Destination");
					this.OnDestinationChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Warehoures")]
	public partial class Warehoures : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _ID;
		
		private string _Code;
		
		private string _Conditions;
		
		private string _ContactID;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(string value);
    partial void OnIDChanged();
    partial void OnCodeChanging(string value);
    partial void OnCodeChanged();
    partial void OnConditionsChanging(string value);
    partial void OnConditionsChanged();
    partial void OnContactIDChanging(string value);
    partial void OnContactIDChanged();
    #endregion
		
		public Warehoures()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Code", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Code
		{
			get
			{
				return this._Code;
			}
			set
			{
				if ((this._Code != value))
				{
					this.OnCodeChanging(value);
					this.SendPropertyChanging();
					this._Code = value;
					this.SendPropertyChanged("Code");
					this.OnCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Conditions", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Conditions
		{
			get
			{
				return this._Conditions;
			}
			set
			{
				if ((this._Conditions != value))
				{
					this.OnConditionsChanging(value);
					this.SendPropertyChanging();
					this._Conditions = value;
					this.SendPropertyChanged("Conditions");
					this.OnConditionsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContactID", DbType="VarChar(50)")]
		public string ContactID
		{
			get
			{
				return this._ContactID;
			}
			set
			{
				if ((this._ContactID != value))
				{
					this.OnContactIDChanging(value);
					this.SendPropertyChanging();
					this._ContactID = value;
					this.SendPropertyChanged("ContactID");
					this.OnContactIDChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Waybills")]
	public partial class Waybills : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _ID;
		
		private string _Code;
		
		private string _ConsigneeID;
		
		private string _DelivererID;
		
		private string _CarrierID;
		
		private string _TransportTermID;
		
		private int _Currency;
		
		private decimal _Price;
		
		private System.Nullable<decimal> _InsuredValue;
		
		private System.Nullable<decimal> _Weight;
		
		private System.Nullable<decimal> _Volume;
		
		private System.DateTime _CreateDate;
		
		private EntitySet<WayItems> _WayItems;
		
		private EntitySet<EntryNotices> _EntryNotices;
		
		private EntitySet<ExitNotices> _ExitNotices;
		
		private EntitySet<Expenses> _Expenses;
		
		private EntitySet<Sortings> _Sortings;
		
		private EntitySet<TransferSteps> _TransferSteps;
		
		private EntitySet<WayFiles> _WayFiles;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(string value);
    partial void OnIDChanged();
    partial void OnCodeChanging(string value);
    partial void OnCodeChanged();
    partial void OnConsigneeIDChanging(string value);
    partial void OnConsigneeIDChanged();
    partial void OnDelivererIDChanging(string value);
    partial void OnDelivererIDChanged();
    partial void OnCarrierIDChanging(string value);
    partial void OnCarrierIDChanged();
    partial void OnTransportTermIDChanging(string value);
    partial void OnTransportTermIDChanged();
    partial void OnCurrencyChanging(int value);
    partial void OnCurrencyChanged();
    partial void OnPriceChanging(decimal value);
    partial void OnPriceChanged();
    partial void OnInsuredValueChanging(System.Nullable<decimal> value);
    partial void OnInsuredValueChanged();
    partial void OnWeightChanging(System.Nullable<decimal> value);
    partial void OnWeightChanged();
    partial void OnVolumeChanging(System.Nullable<decimal> value);
    partial void OnVolumeChanged();
    partial void OnCreateDateChanging(System.DateTime value);
    partial void OnCreateDateChanged();
    #endregion
		
		public Waybills()
		{
			this._WayItems = new EntitySet<WayItems>(new Action<WayItems>(this.attach_WayItems), new Action<WayItems>(this.detach_WayItems));
			this._EntryNotices = new EntitySet<EntryNotices>(new Action<EntryNotices>(this.attach_EntryNotices), new Action<EntryNotices>(this.detach_EntryNotices));
			this._ExitNotices = new EntitySet<ExitNotices>(new Action<ExitNotices>(this.attach_ExitNotices), new Action<ExitNotices>(this.detach_ExitNotices));
			this._Expenses = new EntitySet<Expenses>(new Action<Expenses>(this.attach_Expenses), new Action<Expenses>(this.detach_Expenses));
			this._Sortings = new EntitySet<Sortings>(new Action<Sortings>(this.attach_Sortings), new Action<Sortings>(this.detach_Sortings));
			this._TransferSteps = new EntitySet<TransferSteps>(new Action<TransferSteps>(this.attach_TransferSteps), new Action<TransferSteps>(this.detach_TransferSteps));
			this._WayFiles = new EntitySet<WayFiles>(new Action<WayFiles>(this.attach_WayFiles), new Action<WayFiles>(this.detach_WayFiles));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Code", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Code
		{
			get
			{
				return this._Code;
			}
			set
			{
				if ((this._Code != value))
				{
					this.OnCodeChanging(value);
					this.SendPropertyChanging();
					this._Code = value;
					this.SendPropertyChanged("Code");
					this.OnCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ConsigneeID", DbType="VarChar(50)")]
		public string ConsigneeID
		{
			get
			{
				return this._ConsigneeID;
			}
			set
			{
				if ((this._ConsigneeID != value))
				{
					this.OnConsigneeIDChanging(value);
					this.SendPropertyChanging();
					this._ConsigneeID = value;
					this.SendPropertyChanged("ConsigneeID");
					this.OnConsigneeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DelivererID", DbType="VarChar(50)")]
		public string DelivererID
		{
			get
			{
				return this._DelivererID;
			}
			set
			{
				if ((this._DelivererID != value))
				{
					this.OnDelivererIDChanging(value);
					this.SendPropertyChanging();
					this._DelivererID = value;
					this.SendPropertyChanged("DelivererID");
					this.OnDelivererIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CarrierID", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string CarrierID
		{
			get
			{
				return this._CarrierID;
			}
			set
			{
				if ((this._CarrierID != value))
				{
					this.OnCarrierIDChanging(value);
					this.SendPropertyChanging();
					this._CarrierID = value;
					this.SendPropertyChanged("CarrierID");
					this.OnCarrierIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TransportTermID", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string TransportTermID
		{
			get
			{
				return this._TransportTermID;
			}
			set
			{
				if ((this._TransportTermID != value))
				{
					this.OnTransportTermIDChanging(value);
					this.SendPropertyChanging();
					this._TransportTermID = value;
					this.SendPropertyChanged("TransportTermID");
					this.OnTransportTermIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Currency", DbType="Int NOT NULL")]
		public int Currency
		{
			get
			{
				return this._Currency;
			}
			set
			{
				if ((this._Currency != value))
				{
					this.OnCurrencyChanging(value);
					this.SendPropertyChanging();
					this._Currency = value;
					this.SendPropertyChanged("Currency");
					this.OnCurrencyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Price", DbType="Decimal(18,5) NOT NULL")]
		public decimal Price
		{
			get
			{
				return this._Price;
			}
			set
			{
				if ((this._Price != value))
				{
					this.OnPriceChanging(value);
					this.SendPropertyChanging();
					this._Price = value;
					this.SendPropertyChanged("Price");
					this.OnPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InsuredValue", DbType="Decimal(18,5)")]
		public System.Nullable<decimal> InsuredValue
		{
			get
			{
				return this._InsuredValue;
			}
			set
			{
				if ((this._InsuredValue != value))
				{
					this.OnInsuredValueChanging(value);
					this.SendPropertyChanging();
					this._InsuredValue = value;
					this.SendPropertyChanged("InsuredValue");
					this.OnInsuredValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Weight", DbType="Decimal(18,5)")]
		public System.Nullable<decimal> Weight
		{
			get
			{
				return this._Weight;
			}
			set
			{
				if ((this._Weight != value))
				{
					this.OnWeightChanging(value);
					this.SendPropertyChanging();
					this._Weight = value;
					this.SendPropertyChanged("Weight");
					this.OnWeightChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Volume", DbType="Decimal(18,5)")]
		public System.Nullable<decimal> Volume
		{
			get
			{
				return this._Volume;
			}
			set
			{
				if ((this._Volume != value))
				{
					this.OnVolumeChanging(value);
					this.SendPropertyChanging();
					this._Volume = value;
					this.SendPropertyChanged("Volume");
					this.OnVolumeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreateDate", DbType="DateTime NOT NULL")]
		public System.DateTime CreateDate
		{
			get
			{
				return this._CreateDate;
			}
			set
			{
				if ((this._CreateDate != value))
				{
					this.OnCreateDateChanging(value);
					this.SendPropertyChanging();
					this._CreateDate = value;
					this.SendPropertyChanged("CreateDate");
					this.OnCreateDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Waybills_WayItems", Storage="_WayItems", ThisKey="ID", OtherKey="WaybillID")]
		public EntitySet<WayItems> WayItems
		{
			get
			{
				return this._WayItems;
			}
			set
			{
				this._WayItems.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Waybills_EntryNotices", Storage="_EntryNotices", ThisKey="ID", OtherKey="WaybillID")]
		public EntitySet<EntryNotices> EntryNotices
		{
			get
			{
				return this._EntryNotices;
			}
			set
			{
				this._EntryNotices.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Waybills_ExitNotices", Storage="_ExitNotices", ThisKey="ID", OtherKey="WaybillID")]
		public EntitySet<ExitNotices> ExitNotices
		{
			get
			{
				return this._ExitNotices;
			}
			set
			{
				this._ExitNotices.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Waybills_Expenses", Storage="_Expenses", ThisKey="ID", OtherKey="WaybilID")]
		public EntitySet<Expenses> Expenses
		{
			get
			{
				return this._Expenses;
			}
			set
			{
				this._Expenses.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Waybills_Sortings", Storage="_Sortings", ThisKey="ID", OtherKey="WaybillID")]
		public EntitySet<Sortings> Sortings
		{
			get
			{
				return this._Sortings;
			}
			set
			{
				this._Sortings.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Waybills_TransferSteps", Storage="_TransferSteps", ThisKey="ID", OtherKey="WaybillID")]
		public EntitySet<TransferSteps> TransferSteps
		{
			get
			{
				return this._TransferSteps;
			}
			set
			{
				this._TransferSteps.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Waybills_WayFiles", Storage="_WayFiles", ThisKey="ID", OtherKey="WaybillID")]
		public EntitySet<WayFiles> WayFiles
		{
			get
			{
				return this._WayFiles;
			}
			set
			{
				this._WayFiles.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_WayItems(WayItems entity)
		{
			this.SendPropertyChanging();
			entity.Waybills = this;
		}
		
		private void detach_WayItems(WayItems entity)
		{
			this.SendPropertyChanging();
			entity.Waybills = null;
		}
		
		private void attach_EntryNotices(EntryNotices entity)
		{
			this.SendPropertyChanging();
			entity.Waybills = this;
		}
		
		private void detach_EntryNotices(EntryNotices entity)
		{
			this.SendPropertyChanging();
			entity.Waybills = null;
		}
		
		private void attach_ExitNotices(ExitNotices entity)
		{
			this.SendPropertyChanging();
			entity.Waybills = this;
		}
		
		private void detach_ExitNotices(ExitNotices entity)
		{
			this.SendPropertyChanging();
			entity.Waybills = null;
		}
		
		private void attach_Expenses(Expenses entity)
		{
			this.SendPropertyChanging();
			entity.Waybills = this;
		}
		
		private void detach_Expenses(Expenses entity)
		{
			this.SendPropertyChanging();
			entity.Waybills = null;
		}
		
		private void attach_Sortings(Sortings entity)
		{
			this.SendPropertyChanging();
			entity.Waybills = this;
		}
		
		private void detach_Sortings(Sortings entity)
		{
			this.SendPropertyChanging();
			entity.Waybills = null;
		}
		
		private void attach_TransferSteps(TransferSteps entity)
		{
			this.SendPropertyChanging();
			entity.Waybills = this;
		}
		
		private void detach_TransferSteps(TransferSteps entity)
		{
			this.SendPropertyChanging();
			entity.Waybills = null;
		}
		
		private void attach_WayFiles(WayFiles entity)
		{
			this.SendPropertyChanging();
			entity.Waybills = this;
		}
		
		private void detach_WayFiles(WayFiles entity)
		{
			this.SendPropertyChanging();
			entity.Waybills = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.WayFiles")]
	public partial class WayFiles : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _ID;
		
		private string _WaybillID;
		
		private string _WayItemID;
		
		private string _Name;
		
		private int _Type;
		
		private string _Url;
		
		private System.Nullable<int> _OrderIndex;
		
		private string _AdminID;
		
		private System.DateTime _CreateDate;
		
		private EntityRef<Waybills> _Waybills;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(string value);
    partial void OnIDChanged();
    partial void OnWaybillIDChanging(string value);
    partial void OnWaybillIDChanged();
    partial void OnWayItemIDChanging(string value);
    partial void OnWayItemIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnTypeChanging(int value);
    partial void OnTypeChanged();
    partial void OnUrlChanging(string value);
    partial void OnUrlChanged();
    partial void OnOrderIndexChanging(System.Nullable<int> value);
    partial void OnOrderIndexChanged();
    partial void OnAdminIDChanging(string value);
    partial void OnAdminIDChanged();
    partial void OnCreateDateChanging(System.DateTime value);
    partial void OnCreateDateChanged();
    #endregion
		
		public WayFiles()
		{
			this._Waybills = default(EntityRef<Waybills>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WaybillID", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string WaybillID
		{
			get
			{
				return this._WaybillID;
			}
			set
			{
				if ((this._WaybillID != value))
				{
					if (this._Waybills.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnWaybillIDChanging(value);
					this.SendPropertyChanging();
					this._WaybillID = value;
					this.SendPropertyChanged("WaybillID");
					this.OnWaybillIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WayItemID", DbType="VarChar(50)")]
		public string WayItemID
		{
			get
			{
				return this._WayItemID;
			}
			set
			{
				if ((this._WayItemID != value))
				{
					this.OnWayItemIDChanging(value);
					this.SendPropertyChanging();
					this._WayItemID = value;
					this.SendPropertyChanged("WayItemID");
					this.OnWayItemIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(150)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type", DbType="Int NOT NULL")]
		public int Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Url", DbType="VarChar(300) NOT NULL", CanBeNull=false)]
		public string Url
		{
			get
			{
				return this._Url;
			}
			set
			{
				if ((this._Url != value))
				{
					this.OnUrlChanging(value);
					this.SendPropertyChanging();
					this._Url = value;
					this.SendPropertyChanged("Url");
					this.OnUrlChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrderIndex", DbType="Int")]
		public System.Nullable<int> OrderIndex
		{
			get
			{
				return this._OrderIndex;
			}
			set
			{
				if ((this._OrderIndex != value))
				{
					this.OnOrderIndexChanging(value);
					this.SendPropertyChanging();
					this._OrderIndex = value;
					this.SendPropertyChanged("OrderIndex");
					this.OnOrderIndexChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AdminID", DbType="VarChar(50)")]
		public string AdminID
		{
			get
			{
				return this._AdminID;
			}
			set
			{
				if ((this._AdminID != value))
				{
					this.OnAdminIDChanging(value);
					this.SendPropertyChanging();
					this._AdminID = value;
					this.SendPropertyChanged("AdminID");
					this.OnAdminIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreateDate", DbType="DateTime NOT NULL")]
		public System.DateTime CreateDate
		{
			get
			{
				return this._CreateDate;
			}
			set
			{
				if ((this._CreateDate != value))
				{
					this.OnCreateDateChanging(value);
					this.SendPropertyChanging();
					this._CreateDate = value;
					this.SendPropertyChanged("CreateDate");
					this.OnCreateDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Waybills_WayFiles", Storage="_Waybills", ThisKey="WaybillID", OtherKey="ID", IsForeignKey=true)]
		public Waybills Waybills
		{
			get
			{
				return this._Waybills.Entity;
			}
			set
			{
				Waybills previousValue = this._Waybills.Entity;
				if (((previousValue != value) 
							|| (this._Waybills.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Waybills.Entity = null;
						previousValue.WayFiles.Remove(this);
					}
					this._Waybills.Entity = value;
					if ((value != null))
					{
						value.WayFiles.Add(this);
						this._WaybillID = value.ID;
					}
					else
					{
						this._WaybillID = default(string);
					}
					this.SendPropertyChanged("Waybills");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
